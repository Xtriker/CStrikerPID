
Control_PID_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080055e0  080055e0  000155e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005650  08005650  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005650  08005650  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005650  08005650  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005650  08005650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000007c  080056d4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080056d4  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeba  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002195  00000000  00000000  0002ef5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000310f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00031dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a47  00000000  00000000  00032990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de30  00000000  00000000  0004b3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6cd  00000000  00000000  00059207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e38d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  000e3928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080055c4 	.word	0x080055c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080055c4 	.word	0x080055c4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	; 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	3a01      	subs	r2, #1
 8000b22:	bf28      	it	cs
 8000b24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b28:	d2ed      	bcs.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd6:	2afd      	cmp	r2, #253	; 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	; 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	; 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	; 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop

08000f24 <__gesf2>:
 8000f24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f28:	e006      	b.n	8000f38 <__cmpsf2+0x4>
 8000f2a:	bf00      	nop

08000f2c <__lesf2>:
 8000f2c:	f04f 0c01 	mov.w	ip, #1
 8000f30:	e002      	b.n	8000f38 <__cmpsf2+0x4>
 8000f32:	bf00      	nop

08000f34 <__cmpsf2>:
 8000f34:	f04f 0c01 	mov.w	ip, #1
 8000f38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f48:	bf18      	it	ne
 8000f4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4e:	d011      	beq.n	8000f74 <__cmpsf2+0x40>
 8000f50:	b001      	add	sp, #4
 8000f52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f56:	bf18      	it	ne
 8000f58:	ea90 0f01 	teqne	r0, r1
 8000f5c:	bf58      	it	pl
 8000f5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f62:	bf88      	it	hi
 8000f64:	17c8      	asrhi	r0, r1, #31
 8000f66:	bf38      	it	cc
 8000f68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f6c:	bf18      	it	ne
 8000f6e:	f040 0001 	orrne.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f78:	d102      	bne.n	8000f80 <__cmpsf2+0x4c>
 8000f7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7e:	d105      	bne.n	8000f8c <__cmpsf2+0x58>
 8000f80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f84:	d1e4      	bne.n	8000f50 <__cmpsf2+0x1c>
 8000f86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f8a:	d0e1      	beq.n	8000f50 <__cmpsf2+0x1c>
 8000f8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <__aeabi_cfrcmple>:
 8000f94:	4684      	mov	ip, r0
 8000f96:	4608      	mov	r0, r1
 8000f98:	4661      	mov	r1, ip
 8000f9a:	e7ff      	b.n	8000f9c <__aeabi_cfcmpeq>

08000f9c <__aeabi_cfcmpeq>:
 8000f9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9e:	f7ff ffc9 	bl	8000f34 <__cmpsf2>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	bf48      	it	mi
 8000fa6:	f110 0f00 	cmnmi.w	r0, #0
 8000faa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fac <__aeabi_fcmpeq>:
 8000fac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb0:	f7ff fff4 	bl	8000f9c <__aeabi_cfcmpeq>
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2001      	moveq	r0, #1
 8000fb8:	2000      	movne	r0, #0
 8000fba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_fcmplt>:
 8000fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc4:	f7ff ffea 	bl	8000f9c <__aeabi_cfcmpeq>
 8000fc8:	bf34      	ite	cc
 8000fca:	2001      	movcc	r0, #1
 8000fcc:	2000      	movcs	r0, #0
 8000fce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_fcmple>:
 8000fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd8:	f7ff ffe0 	bl	8000f9c <__aeabi_cfcmpeq>
 8000fdc:	bf94      	ite	ls
 8000fde:	2001      	movls	r0, #1
 8000fe0:	2000      	movhi	r0, #0
 8000fe2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_fcmpge>:
 8000fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fec:	f7ff ffd2 	bl	8000f94 <__aeabi_cfrcmple>
 8000ff0:	bf94      	ite	ls
 8000ff2:	2001      	movls	r0, #1
 8000ff4:	2000      	movhi	r0, #0
 8000ff6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffa:	bf00      	nop

08000ffc <__aeabi_fcmpgt>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff ffc8 	bl	8000f94 <__aeabi_cfrcmple>
 8001004:	bf34      	ite	cc
 8001006:	2001      	movcc	r0, #1
 8001008:	2000      	movcs	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_f2uiz>:
 8001010:	0042      	lsls	r2, r0, #1
 8001012:	d20e      	bcs.n	8001032 <__aeabi_f2uiz+0x22>
 8001014:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001018:	d30b      	bcc.n	8001032 <__aeabi_f2uiz+0x22>
 800101a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800101e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001022:	d409      	bmi.n	8001038 <__aeabi_f2uiz+0x28>
 8001024:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800102c:	fa23 f002 	lsr.w	r0, r3, r2
 8001030:	4770      	bx	lr
 8001032:	f04f 0000 	mov.w	r0, #0
 8001036:	4770      	bx	lr
 8001038:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800103c:	d101      	bne.n	8001042 <__aeabi_f2uiz+0x32>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	d102      	bne.n	8001048 <__aeabi_f2uiz+0x38>
 8001042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001046:	4770      	bx	lr
 8001048:	f04f 0000 	mov.w	r0, #0
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <app_Debounce>:
/* Funcion que permite tener una doble funcion a los tres botones; la funcion primaria es activada cuando se realiza
 * una pulsacion sensilla de 100ms, eso realiza un aumento a la variable Seleccion para realizar el cambio de nuemros
 * en el display de 7 segmentos, miestras que la funcion avanzada, cuando se mantiene pulsado el boton a un tiempo
 * mayor de 600ms, se realiza el cambio del display de 7 segmentos.
 */
void app_Debounce(uint16_t Boton[], uint8_t Numero_Botones) {
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
 800105c:	466b      	mov	r3, sp
 800105e:	461d      	mov	r5, r3
	uint8_t Presionado[Numero_Botones];
 8001060:	78fc      	ldrb	r4, [r7, #3]
 8001062:	4623      	mov	r3, r4
 8001064:	3b01      	subs	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	b2e0      	uxtb	r0, r4
 800106a:	f04f 0100 	mov.w	r1, #0
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	00cb      	lsls	r3, r1, #3
 8001078:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800107c:	00c2      	lsls	r2, r0, #3
 800107e:	b2e0      	uxtb	r0, r4
 8001080:	f04f 0100 	mov.w	r1, #0
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	00cb      	lsls	r3, r1, #3
 800108e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001092:	00c2      	lsls	r2, r0, #3
 8001094:	4623      	mov	r3, r4
 8001096:	3307      	adds	r3, #7
 8001098:	08db      	lsrs	r3, r3, #3
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	ebad 0d03 	sub.w	sp, sp, r3
 80010a0:	466b      	mov	r3, sp
 80010a2:	3300      	adds	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
	while (a < Numero_Botones + 1) {
 80010a6:	e00d      	b.n	80010c4 <app_Debounce+0x74>
		Presionado[a] = 0;
 80010a8:	4b76      	ldr	r3, [pc, #472]	; (8001284 <app_Debounce+0x234>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2100      	movs	r1, #0
 80010b4:	5499      	strb	r1, [r3, r2]
		a++;
 80010b6:	4b73      	ldr	r3, [pc, #460]	; (8001284 <app_Debounce+0x234>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b70      	ldr	r3, [pc, #448]	; (8001284 <app_Debounce+0x234>)
 80010c2:	701a      	strb	r2, [r3, #0]
	while (a < Numero_Botones + 1) {
 80010c4:	4b6f      	ldr	r3, [pc, #444]	; (8001284 <app_Debounce+0x234>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d2eb      	bcs.n	80010a8 <app_Debounce+0x58>
	}

	while (HAL_GPIO_ReadPin(GPIOB, Boton[i]) == GPIO_PIN_RESET) {
 80010d0:	e02f      	b.n	8001132 <app_Debounce+0xe2>
		/* Se realiza una pausa de 500 ms */
		//delay_us(50000);
		/* Cambiando el valor del tiempo */
		delay_ms(30);
 80010d2:	201e      	movs	r0, #30
 80010d4:	f000 f9f2 	bl	80014bc <delay_ms>
		TiempoPresionado = TiempoPresionado + 100;
 80010d8:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <app_Debounce+0x238>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	3364      	adds	r3, #100	; 0x64
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <app_Debounce+0x238>)
 80010e2:	801a      	strh	r2, [r3, #0]

		/* Guardando el valor del display actual en un array */
		Seleccion_anterior[Aumento] = Seleccion;
 80010e4:	4b69      	ldr	r3, [pc, #420]	; (800128c <app_Debounce+0x23c>)
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	4b69      	ldr	r3, [pc, #420]	; (8001290 <app_Debounce+0x240>)
 80010ea:	f993 3000 	ldrsb.w	r3, [r3]
 80010ee:	461a      	mov	r2, r3
 80010f0:	b2c9      	uxtb	r1, r1
 80010f2:	4b68      	ldr	r3, [pc, #416]	; (8001294 <app_Debounce+0x244>)
 80010f4:	5499      	strb	r1, [r3, r2]
		Aumento_anterior[i] = Aumento;
 80010f6:	4b66      	ldr	r3, [pc, #408]	; (8001290 <app_Debounce+0x240>)
 80010f8:	f993 1000 	ldrsb.w	r1, [r3]
 80010fc:	4b66      	ldr	r3, [pc, #408]	; (8001298 <app_Debounce+0x248>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	b2c9      	uxtb	r1, r1
 8001106:	4b65      	ldr	r3, [pc, #404]	; (800129c <app_Debounce+0x24c>)
 8001108:	5499      	strb	r1, [r3, r2]
		if (TiempoPresionado >= OpcionDos) {
 800110a:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <app_Debounce+0x238>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001112:	d307      	bcc.n	8001124 <app_Debounce+0xd4>
			Presionado[i] = 0;
 8001114:	4b60      	ldr	r3, [pc, #384]	; (8001298 <app_Debounce+0x248>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2100      	movs	r1, #0
 8001120:	5499      	strb	r1, [r3, r2]
 8001122:	e006      	b.n	8001132 <app_Debounce+0xe2>
		} else {
			Presionado[i] = 1;
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <app_Debounce+0x248>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2101      	movs	r1, #1
 8001130:	5499      	strb	r1, [r3, r2]
	while (HAL_GPIO_ReadPin(GPIOB, Boton[i]) == GPIO_PIN_RESET) {
 8001132:	4b59      	ldr	r3, [pc, #356]	; (8001298 <app_Debounce+0x248>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	4857      	ldr	r0, [pc, #348]	; (80012a0 <app_Debounce+0x250>)
 8001144:	f001 fcac 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0c1      	beq.n	80010d2 <app_Debounce+0x82>
		}
	}

	if ((TiempoPresionado <= OpcionUno) && (Presionado[i] == 1)) {
 800114e:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <app_Debounce+0x238>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d832      	bhi.n	80011bc <app_Debounce+0x16c>
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <app_Debounce+0x248>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d12a      	bne.n	80011bc <app_Debounce+0x16c>
		switch (i) {
 8001166:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <app_Debounce+0x248>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d016      	beq.n	800119e <app_Debounce+0x14e>
 8001170:	2b02      	cmp	r3, #2
 8001172:	dc24      	bgt.n	80011be <app_Debounce+0x16e>
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <app_Debounce+0x12e>
 8001178:	2b01      	cmp	r3, #1
 800117a:	d007      	beq.n	800118c <app_Debounce+0x13c>
 800117c:	e01f      	b.n	80011be <app_Debounce+0x16e>
		case 0: {
			TiempoPresionado = 0;
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <app_Debounce+0x238>)
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]

			Aumento = Numero_de_displays;
 8001184:	4b42      	ldr	r3, [pc, #264]	; (8001290 <app_Debounce+0x240>)
 8001186:	2205      	movs	r2, #5
 8001188:	701a      	strb	r2, [r3, #0]
		}
			break;
 800118a:	e018      	b.n	80011be <app_Debounce+0x16e>
		case 1: {
			TiempoPresionado = 0;
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <app_Debounce+0x238>)
 800118e:	2200      	movs	r2, #0
 8001190:	801a      	strh	r2, [r3, #0]
			Seleccion++;
 8001192:	4b3e      	ldr	r3, [pc, #248]	; (800128c <app_Debounce+0x23c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a3c      	ldr	r2, [pc, #240]	; (800128c <app_Debounce+0x23c>)
 800119a:	6013      	str	r3, [r2, #0]
		}
			break;
 800119c:	e00f      	b.n	80011be <app_Debounce+0x16e>
		case 2: {
			TiempoPresionado = 0;
 800119e:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <app_Debounce+0x238>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011aa:	483e      	ldr	r0, [pc, #248]	; (80012a4 <app_Debounce+0x254>)
 80011ac:	f001 fc8f 	bl	8002ace <HAL_GPIO_WritePin>
			Seleccion--;
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <app_Debounce+0x23c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4a35      	ldr	r2, [pc, #212]	; (800128c <app_Debounce+0x23c>)
 80011b8:	6013      	str	r3, [r2, #0]

		}
			break;
 80011ba:	e000      	b.n	80011be <app_Debounce+0x16e>

		}
	}
 80011bc:	bf00      	nop
	if ((TiempoPresionado >= OpcionDos) && (Presionado[i] == 0)) {
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <app_Debounce+0x238>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011c6:	d344      	bcc.n	8001252 <app_Debounce+0x202>
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <app_Debounce+0x248>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	5c9b      	ldrb	r3, [r3, r2]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d13c      	bne.n	8001252 <app_Debounce+0x202>
		switch (i) {
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <app_Debounce+0x248>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d01a      	beq.n	8001218 <app_Debounce+0x1c8>
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	dc49      	bgt.n	800127a <app_Debounce+0x22a>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <app_Debounce+0x1a0>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d007      	beq.n	80011fe <app_Debounce+0x1ae>
 80011ee:	e044      	b.n	800127a <app_Debounce+0x22a>
		case 0: {

			TiempoPresionado = 0;
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <app_Debounce+0x238>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	801a      	strh	r2, [r3, #0]
			Aumento = 1;
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <app_Debounce+0x240>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
		}
			break;
 80011fc:	e028      	b.n	8001250 <app_Debounce+0x200>
		case 1: {

			TiempoPresionado = 0;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <app_Debounce+0x238>)
 8001200:	2200      	movs	r2, #0
 8001202:	801a      	strh	r2, [r3, #0]
			Aumento++;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <app_Debounce+0x240>)
 8001206:	f993 3000 	ldrsb.w	r3, [r3]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	3301      	adds	r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	b25a      	sxtb	r2, r3
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <app_Debounce+0x240>)
 8001214:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
		}
			break;
 8001216:	e01b      	b.n	8001250 <app_Debounce+0x200>
		case 2: {
			TiempoPresionado = 0;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <app_Debounce+0x238>)
 800121a:	2200      	movs	r2, #0
 800121c:	801a      	strh	r2, [r3, #0]
			if(Aumento == 0)
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <app_Debounce+0x240>)
 8001220:	f993 3000 	ldrsb.w	r3, [r3]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <app_Debounce+0x1e0>
			{
				Aumento = 4;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <app_Debounce+0x240>)
 800122a:	2204      	movs	r2, #4
 800122c:	701a      	strb	r2, [r3, #0]
			{
				Aumento--;
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
			}
		}
			break;
 800122e:	e00e      	b.n	800124e <app_Debounce+0x1fe>
				Aumento--;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <app_Debounce+0x240>)
 8001232:	f993 3000 	ldrsb.w	r3, [r3]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	3b01      	subs	r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	b25a      	sxtb	r2, r3
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <app_Debounce+0x240>)
 8001240:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001248:	4816      	ldr	r0, [pc, #88]	; (80012a4 <app_Debounce+0x254>)
 800124a:	f001 fc40 	bl	8002ace <HAL_GPIO_WritePin>
			break;
 800124e:	bf00      	nop
		switch (i) {
 8001250:	e013      	b.n	800127a <app_Debounce+0x22a>
		}
	} else {
		if (i >= Numero_Botones) {
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <app_Debounce+0x248>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	78fa      	ldrb	r2, [r7, #3]
 800125a:	429a      	cmp	r2, r3
 800125c:	d803      	bhi.n	8001266 <app_Debounce+0x216>
			i = 0;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <app_Debounce+0x248>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e009      	b.n	800127a <app_Debounce+0x22a>
		} else {
			i++;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <app_Debounce+0x248>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <app_Debounce+0x248>)
 8001272:	701a      	strb	r2, [r3, #0]
			a = 0;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <app_Debounce+0x234>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	46ad      	mov	sp, r5
		}
	}

}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}
 8001284:	200000ca 	.word	0x200000ca
 8001288:	20000098 	.word	0x20000098
 800128c:	200000b8 	.word	0x200000b8
 8001290:	200000b4 	.word	0x200000b4
 8001294:	200000bc 	.word	0x200000bc
 8001298:	200000c9 	.word	0x200000c9
 800129c:	200000c4 	.word	0x200000c4
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40011000 	.word	0x40011000

080012a8 <app_SeleccionarAngulo>:

void app_SeleccionarAngulo(void) {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	switch (Aumento) {
 80012ac:	4b6f      	ldr	r3, [pc, #444]	; (800146c <app_SeleccionarAngulo+0x1c4>)
 80012ae:	f993 3000 	ldrsb.w	r3, [r3]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	f200 80d6 	bhi.w	8001464 <app_SeleccionarAngulo+0x1bc>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <app_SeleccionarAngulo+0x18>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d5 	.word	0x080012d5
 80012c4:	0800131b 	.word	0x0800131b
 80012c8:	08001367 	.word	0x08001367
 80012cc:	080013b7 	.word	0x080013b7
 80012d0:	0800140f 	.word	0x0800140f
	case 0: {
		if (Seleccion > 3) {
 80012d4:	4b66      	ldr	r3, [pc, #408]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	dd05      	ble.n	80012e8 <app_SeleccionarAngulo+0x40>

			Primero = 0;
 80012dc:	4b65      	ldr	r3, [pc, #404]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
			Seleccion = 0;
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

		}
		if (Seleccion < 0) {
 80012e8:	4b61      	ldr	r3, [pc, #388]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da06      	bge.n	80012fe <app_SeleccionarAngulo+0x56>

			Primero = 9;
 80012f0:	4b60      	ldr	r3, [pc, #384]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 80012f2:	2209      	movs	r2, #9
 80012f4:	601a      	str	r2, [r3, #0]
			Seleccion = 9;
 80012f6:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80012f8:	2209      	movs	r2, #9
 80012fa:	601a      	str	r2, [r3, #0]
		} else {
			Primero = Seleccion * 10000;
			Total = Primero;
		}
	}
		break;
 80012fc:	e0b2      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
			Primero = Seleccion * 10000;
 80012fe:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f242 7210 	movw	r2, #10000	; 0x2710
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	461a      	mov	r2, r3
 800130c:	4b59      	ldr	r3, [pc, #356]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 800130e:	601a      	str	r2, [r3, #0]
			Total = Primero;
 8001310:	4b58      	ldr	r3, [pc, #352]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a58      	ldr	r2, [pc, #352]	; (8001478 <app_SeleccionarAngulo+0x1d0>)
 8001316:	6013      	str	r3, [r2, #0]
		break;
 8001318:	e0a4      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
	case 1: {
		if (Seleccion > 8) {
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b08      	cmp	r3, #8
 8001320:	dd05      	ble.n	800132e <app_SeleccionarAngulo+0x86>

			Segundo = 0;
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <app_SeleccionarAngulo+0x1d4>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
			Seleccion = 0;
 8001328:	4b51      	ldr	r3, [pc, #324]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]

		}
		if (Seleccion < 0) {
 800132e:	4b50      	ldr	r3, [pc, #320]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	da06      	bge.n	8001344 <app_SeleccionarAngulo+0x9c>

			Segundo = 9;
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <app_SeleccionarAngulo+0x1d4>)
 8001338:	2209      	movs	r2, #9
 800133a:	601a      	str	r2, [r3, #0]
			Seleccion = 9;
 800133c:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 800133e:	2209      	movs	r2, #9
 8001340:	601a      	str	r2, [r3, #0]
		} else {
			Segundo = Seleccion * 1000;
			Total = Segundo + Primero;
		}
	}
		break;
 8001342:	e08f      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
			Segundo = Seleccion * 1000;
 8001344:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <app_SeleccionarAngulo+0x1d4>)
 8001354:	601a      	str	r2, [r3, #0]
			Total = Segundo + Primero;
 8001356:	4b49      	ldr	r3, [pc, #292]	; (800147c <app_SeleccionarAngulo+0x1d4>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a45      	ldr	r2, [pc, #276]	; (8001478 <app_SeleccionarAngulo+0x1d0>)
 8001362:	6013      	str	r3, [r2, #0]
		break;
 8001364:	e07e      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
	case 2: {
		if (Seleccion > 9) {
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b09      	cmp	r3, #9
 800136c:	dd05      	ble.n	800137a <app_SeleccionarAngulo+0xd2>

			Tercero = 0;
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <app_SeleccionarAngulo+0x1d8>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
			Seleccion = 0;
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
		}
		if (Seleccion < 0) {
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da06      	bge.n	8001390 <app_SeleccionarAngulo+0xe8>

			Tercero = 9;
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <app_SeleccionarAngulo+0x1d8>)
 8001384:	2209      	movs	r2, #9
 8001386:	601a      	str	r2, [r3, #0]
			Seleccion = 9;
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 800138a:	2209      	movs	r2, #9
 800138c:	601a      	str	r2, [r3, #0]
		} else {
			Tercero = Seleccion * 100;
			Total = Primero + Segundo + Tercero;
		}
	}
		break;
 800138e:	e069      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
			Tercero = Seleccion * 100;
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2264      	movs	r2, #100	; 0x64
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <app_SeleccionarAngulo+0x1d8>)
 800139e:	601a      	str	r2, [r3, #0]
			Total = Primero + Segundo + Tercero;
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b35      	ldr	r3, [pc, #212]	; (800147c <app_SeleccionarAngulo+0x1d4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	441a      	add	r2, r3
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <app_SeleccionarAngulo+0x1d8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a31      	ldr	r2, [pc, #196]	; (8001478 <app_SeleccionarAngulo+0x1d0>)
 80013b2:	6013      	str	r3, [r2, #0]
		break;
 80013b4:	e056      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
	case 3: {
		if (Seleccion > 9) {
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b09      	cmp	r3, #9
 80013bc:	dd05      	ble.n	80013ca <app_SeleccionarAngulo+0x122>

			Cuarto = 0;
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <app_SeleccionarAngulo+0x1dc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
			Seleccion = 0;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
		}
		if (Seleccion < 0) {
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da06      	bge.n	80013e0 <app_SeleccionarAngulo+0x138>

			Cuarto = 9;
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <app_SeleccionarAngulo+0x1dc>)
 80013d4:	2209      	movs	r2, #9
 80013d6:	601a      	str	r2, [r3, #0]
			Seleccion = 9;
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80013da:	2209      	movs	r2, #9
 80013dc:	601a      	str	r2, [r3, #0]
		} else {
			Cuarto = Seleccion * 10;
			Total = Primero + Segundo + Tercero + Cuarto;
		}
	}break;
 80013de:	e041      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
			Cuarto = Seleccion * 10;
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <app_SeleccionarAngulo+0x1dc>)
 80013f0:	601a      	str	r2, [r3, #0]
			Total = Primero + Segundo + Tercero + Cuarto;
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <app_SeleccionarAngulo+0x1d4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	441a      	add	r2, r3
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <app_SeleccionarAngulo+0x1d8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	441a      	add	r2, r3
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <app_SeleccionarAngulo+0x1dc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <app_SeleccionarAngulo+0x1d0>)
 800140a:	6013      	str	r3, [r2, #0]
	}break;
 800140c:	e02a      	b.n	8001464 <app_SeleccionarAngulo+0x1bc>
	case 4: {
			if (Seleccion > 9) {
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b09      	cmp	r3, #9
 8001414:	dd05      	ble.n	8001422 <app_SeleccionarAngulo+0x17a>

				Quinto = 0;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <app_SeleccionarAngulo+0x1e0>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
				Seleccion = 0;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
			}
			if (Seleccion < 0) {
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da06      	bge.n	8001438 <app_SeleccionarAngulo+0x190>

				Quinto = 9;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <app_SeleccionarAngulo+0x1e0>)
 800142c:	2209      	movs	r2, #9
 800142e:	601a      	str	r2, [r3, #0]
				Seleccion = 9;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 8001432:	2209      	movs	r2, #9
 8001434:	601a      	str	r2, [r3, #0]
			} else {
				Quinto = Seleccion;
				Total = Primero + Segundo + Tercero + Cuarto + Quinto;
			}
		}
		break;
 8001436:	e014      	b.n	8001462 <app_SeleccionarAngulo+0x1ba>
				Quinto = Seleccion;
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <app_SeleccionarAngulo+0x1c8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <app_SeleccionarAngulo+0x1e0>)
 8001440:	601a      	str	r2, [r3, #0]
				Total = Primero + Segundo + Tercero + Cuarto + Quinto;
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <app_SeleccionarAngulo+0x1cc>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <app_SeleccionarAngulo+0x1d4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	441a      	add	r2, r3
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <app_SeleccionarAngulo+0x1d8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	441a      	add	r2, r3
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <app_SeleccionarAngulo+0x1dc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	441a      	add	r2, r3
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <app_SeleccionarAngulo+0x1e0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4413      	add	r3, r2
 800145e:	4a06      	ldr	r2, [pc, #24]	; (8001478 <app_SeleccionarAngulo+0x1d0>)
 8001460:	6013      	str	r3, [r2, #0]
		break;
 8001462:	bf00      	nop
	default: {

	}
	}
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	200000b4 	.word	0x200000b4
 8001470:	200000b8 	.word	0x200000b8
 8001474:	200000a4 	.word	0x200000a4
 8001478:	2000009c 	.word	0x2000009c
 800147c:	200000a8 	.word	0x200000a8
 8001480:	200000ac 	.word	0x200000ac
 8001484:	200000b0 	.word	0x200000b0
 8001488:	200000a0 	.word	0x200000a0

0800148c <delay_us>:
#include "app_Delay.h"

void delay_us (uint16_t us)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <delay_us+0x2c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800149e:	bf00      	nop
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <delay_us+0x2c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3f9      	bcc.n	80014a0 <delay_us+0x14>
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	200000ec 	.word	0x200000ec

080014bc <delay_ms>:


void delay_ms (uint16_t ms)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	uint32_t conversion = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <delay_ms+0x3c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
	conversion = ms * 1000;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim1) < conversion);
 80014de:	bf00      	nop
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <delay_ms+0x3c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f9      	bhi.n	80014e0 <delay_ms+0x24>
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	200000ec 	.word	0x200000ec

080014fc <app_CruceCero>:
float RPM_cal = 0;
uint16_t Boton[3] = {0x1000, 0x2000, 0x4000};
uint8_t Bandera = 0;

void app_CruceCero(float Tiempo_activacion)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if(Bandera_DetectorCero == 0)
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <app_CruceCero+0x4c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d119      	bne.n	8001540 <app_CruceCero+0x44>
	{
		delay_us(Tiempo_activacion);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fd7f 	bl	8001010 <__aeabi_f2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	b29b      	uxth	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ffb8 	bl	800148c <delay_us>
		HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	480a      	ldr	r0, [pc, #40]	; (800154c <app_CruceCero+0x50>)
 8001524:	f001 fad3 	bl	8002ace <HAL_GPIO_WritePin>
		delay_us(3);
 8001528:	2003      	movs	r0, #3
 800152a:	f7ff ffaf 	bl	800148c <delay_us>
		//delay_us(20);
		HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <app_CruceCero+0x50>)
 8001536:	f001 faca 	bl	8002ace <HAL_GPIO_WritePin>
		Bandera_DetectorCero = 1;
 800153a:	4b03      	ldr	r3, [pc, #12]	; (8001548 <app_CruceCero+0x4c>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
	}
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000006 	.word	0x20000006
 800154c:	40010c00 	.word	0x40010c00

08001550 <app_PIDDimmer>:
			  }
		  }
}

void app_PIDDimmer(uint16_t Frecuencia)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af04      	add	r7, sp, #16
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	 switch(opcion)
 800155a:	4b8f      	ldr	r3, [pc, #572]	; (8001798 <app_PIDDimmer+0x248>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b04      	cmp	r3, #4
 8001560:	f200 80f2 	bhi.w	8001748 <app_PIDDimmer+0x1f8>
 8001564:	a201      	add	r2, pc, #4	; (adr r2, 800156c <app_PIDDimmer+0x1c>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	08001581 	.word	0x08001581
 8001570:	080015bb 	.word	0x080015bb
 8001574:	080015ed 	.word	0x080015ed
 8001578:	080016c7 	.word	0x080016c7
 800157c:	080016fd 	.word	0x080016fd
		  {
	 	 	case Debounce:
			 {
				if ((Aumento == 5) && (Bandera == 0)) {
 8001580:	4b86      	ldr	r3, [pc, #536]	; (800179c <app_PIDDimmer+0x24c>)
 8001582:	f993 3000 	ldrsb.w	r3, [r3]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d107      	bne.n	800159a <app_PIDDimmer+0x4a>
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <app_PIDDimmer+0x250>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <app_PIDDimmer+0x4a>
					opcion = Ecuacion;
 8001592:	4b81      	ldr	r3, [pc, #516]	; (8001798 <app_PIDDimmer+0x248>)
 8001594:	2202      	movs	r2, #2
 8001596:	701a      	strb	r2, [r3, #0]
						opcion = Inicio;
					} else {
						opcion = Ecuacion;
					}
				}
			 }break;
 8001598:	e0e9      	b.n	800176e <app_PIDDimmer+0x21e>
					app_Debounce(Boton, 2);
 800159a:	2102      	movs	r1, #2
 800159c:	4881      	ldr	r0, [pc, #516]	; (80017a4 <app_PIDDimmer+0x254>)
 800159e:	f7ff fd57 	bl	8001050 <app_Debounce>
					if (Bandera == 0) {
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <app_PIDDimmer+0x250>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <app_PIDDimmer+0x62>
						opcion = Inicio;
 80015aa:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <app_PIDDimmer+0x248>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
			 }break;
 80015b0:	e0dd      	b.n	800176e <app_PIDDimmer+0x21e>
						opcion = Ecuacion;
 80015b2:	4b79      	ldr	r3, [pc, #484]	; (8001798 <app_PIDDimmer+0x248>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	701a      	strb	r2, [r3, #0]
			 }break;
 80015b8:	e0d9      	b.n	800176e <app_PIDDimmer+0x21e>
	 	 	case Inicio:
			  {
					  app_SeleccionarAngulo();
 80015ba:	f7ff fe75 	bl	80012a8 <app_SeleccionarAngulo>

					  app_NumeroAMAX7219(Total, 5);
 80015be:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <app_PIDDimmer+0x258>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2105      	movs	r1, #5
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f97b 	bl	80018c0 <app_NumeroAMAX7219>

					  if(Bandera == 0)
 80015ca:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <app_PIDDimmer+0x250>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <app_PIDDimmer+0x8a>
					  {
						 opcion = Debounce;
 80015d2:	4b71      	ldr	r3, [pc, #452]	; (8001798 <app_PIDDimmer+0x248>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
					  else if(Bandera == 1)
					  {
						 opcion = Ecuacion;
					  }
			  }
			  break;
 80015d8:	e0c8      	b.n	800176c <app_PIDDimmer+0x21c>
					  else if(Bandera == 1)
 80015da:	4b71      	ldr	r3, [pc, #452]	; (80017a0 <app_PIDDimmer+0x250>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	f040 80c4 	bne.w	800176c <app_PIDDimmer+0x21c>
						 opcion = Ecuacion;
 80015e4:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <app_PIDDimmer+0x248>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	701a      	strb	r2, [r3, #0]
			  break;
 80015ea:	e0bf      	b.n	800176c <app_PIDDimmer+0x21c>
	 	 	case Ecuacion:
			  {
				  if(Aumento == 1)
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <app_PIDDimmer+0x24c>)
 80015ee:	f993 3000 	ldrsb.w	r3, [r3]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d108      	bne.n	8001608 <app_PIDDimmer+0xb8>
				  {
					  opcion = Debounce;
 80015f6:	4b68      	ldr	r3, [pc, #416]	; (8001798 <app_PIDDimmer+0x248>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]

					  Bandera = 0;
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <app_PIDDimmer+0x250>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]

					  app_LimpiarDisplays();
 8001602:	f000 f99d 	bl	8001940 <app_LimpiarDisplays>
					  Tiempo_activacion = -0.00000000003548750199*pow(Total,3)+0.00000101425243671259*pow(Total,2)-0.017192868762661*Total+687.425829061752;

					  opcion = Dimmer;
				  }
			  }
			  break;
 8001606:	e0b2      	b.n	800176e <app_PIDDimmer+0x21e>
					  RPM_cal = Frecuencia*60;
 8001608:	88fa      	ldrh	r2, [r7, #6]
 800160a:	4613      	mov	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fae2 	bl	8000bdc <__aeabi_i2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4a64      	ldr	r2, [pc, #400]	; (80017ac <app_PIDDimmer+0x25c>)
 800161c:	6013      	str	r3, [r2, #0]
					  Tiempo_activacion = -0.00000000003548750199*pow(Total,3)+0.00000101425243671259*pow(Total,2)-0.017192868762661*Total+687.425829061752;
 800161e:	4b62      	ldr	r3, [pc, #392]	; (80017a8 <app_PIDDimmer+0x258>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fed6 	bl	80003d4 <__aeabi_ui2d>
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <app_PIDDimmer+0x260>)
 800162e:	f003 f839 	bl	80046a4 <pow>
 8001632:	a351      	add	r3, pc, #324	; (adr r3, 8001778 <app_PIDDimmer+0x228>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe ff46 	bl	80004c8 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4614      	mov	r4, r2
 8001642:	461d      	mov	r5, r3
 8001644:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <app_PIDDimmer+0x258>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fec3 	bl	80003d4 <__aeabi_ui2d>
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001656:	f003 f825 	bl	80046a4 <pow>
 800165a:	a349      	add	r3, pc, #292	; (adr r3, 8001780 <app_PIDDimmer+0x230>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ff32 	bl	80004c8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fd76 	bl	800015c <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4614      	mov	r4, r2
 8001676:	461d      	mov	r5, r3
 8001678:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <app_PIDDimmer+0x258>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fea9 	bl	80003d4 <__aeabi_ui2d>
 8001682:	a341      	add	r3, pc, #260	; (adr r3, 8001788 <app_PIDDimmer+0x238>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ff1e 	bl	80004c8 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fd60 	bl	8000158 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	a33b      	add	r3, pc, #236	; (adr r3, 8001790 <app_PIDDimmer+0x240>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe fd59 	bl	800015c <__adddf3>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f9b9 	bl	8000a28 <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <app_PIDDimmer+0x264>)
 80016bc:	801a      	strh	r2, [r3, #0]
					  opcion = Dimmer;
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <app_PIDDimmer+0x248>)
 80016c0:	2203      	movs	r2, #3
 80016c2:	701a      	strb	r2, [r3, #0]
			  break;
 80016c4:	e053      	b.n	800176e <app_PIDDimmer+0x21e>
	 	 	case Dimmer:
	 	 	{
				  if(Aumento == 1)
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <app_PIDDimmer+0x24c>)
 80016c8:	f993 3000 	ldrsb.w	r3, [r3]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <app_PIDDimmer+0x192>
				  {
					  opcion = Inicio;
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <app_PIDDimmer+0x248>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]

					  Bandera = 0;
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <app_PIDDimmer+0x250>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]

					  app_LimpiarDisplays();
 80016dc:	f000 f930 	bl	8001940 <app_LimpiarDisplays>
				  {
					  	  	 app_CruceCero(PIDOutputGet());
					  	  	 Bandera = 1;
					  	  	 opcion = PID;
				  }
			  }break;
 80016e0:	e045      	b.n	800176e <app_PIDDimmer+0x21e>
					  	  	 app_CruceCero(PIDOutputGet());
 80016e2:	f000 fae1 	bl	8001ca8 <PIDOutputGet>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff07 	bl	80014fc <app_CruceCero>
					  	  	 Bandera = 1;
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <app_PIDDimmer+0x250>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
					  	  	 opcion = PID;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <app_PIDDimmer+0x248>)
 80016f6:	2204      	movs	r2, #4
 80016f8:	701a      	strb	r2, [r3, #0]
			  }break;
 80016fa:	e038      	b.n	800176e <app_PIDDimmer+0x21e>
			  case PID:
			 {
				 if(Aumento == 1)
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <app_PIDDimmer+0x24c>)
 80016fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <app_PIDDimmer+0x1c8>
				 {
					 opcion = Inicio;
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <app_PIDDimmer+0x248>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]

					  Bandera = 0;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <app_PIDDimmer+0x250>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]

					  app_LimpiarDisplays();
 8001712:	f000 f915 	bl	8001940 <app_LimpiarDisplays>
					 //Angulo = - (PIDOutputGet()) + 160;


					 opcion = Debounce;
				 }
			 }break;
 8001716:	e02a      	b.n	800176e <app_PIDDimmer+0x21e>
					 PIDInputSet(Total);
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <app_PIDDimmer+0x258>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa59 	bl	8000bd4 <__aeabi_ui2f>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fab1 	bl	8001c8c <PIDInputSet>
					 PIDSetpointSet(RPM_cal);
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <app_PIDDimmer+0x25c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fa9e 	bl	8001c70 <PIDSetpointSet>
					 PIDOutputLimitsSet(650, 200);
 8001734:	4920      	ldr	r1, [pc, #128]	; (80017b8 <app_PIDDimmer+0x268>)
 8001736:	4821      	ldr	r0, [pc, #132]	; (80017bc <app_PIDDimmer+0x26c>)
 8001738:	f000 f9ec 	bl	8001b14 <PIDOutputLimitsSet>
					 PIDCompute();
 800173c:	f000 f950 	bl	80019e0 <PIDCompute>
					 opcion = Debounce;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <app_PIDDimmer+0x248>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
			 }break;
 8001746:	e012      	b.n	800176e <app_PIDDimmer+0x21e>
			  default:
			  {
				  PIDInit(100, 400, 10, 650, 200, 20, DIRECT, AUTOMATIC);
 8001748:	2301      	movs	r3, #1
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	2300      	movs	r3, #0
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <app_PIDDimmer+0x270>)
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <app_PIDDimmer+0x268>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <app_PIDDimmer+0x26c>)
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <app_PIDDimmer+0x274>)
 800175c:	491a      	ldr	r1, [pc, #104]	; (80017c8 <app_PIDDimmer+0x278>)
 800175e:	481b      	ldr	r0, [pc, #108]	; (80017cc <app_PIDDimmer+0x27c>)
 8001760:	f000 f910 	bl	8001984 <PIDInit>
				  opcion = Inicio;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <app_PIDDimmer+0x248>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
			  }
		  }
}
 800176a:	e000      	b.n	800176e <app_PIDDimmer+0x21e>
			  break;
 800176c:	bf00      	nop
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bdb0      	pop	{r4, r5, r7, pc}
 8001776:	bf00      	nop
 8001778:	01832c44 	.word	0x01832c44
 800177c:	bdc3826c 	.word	0xbdc3826c
 8001780:	59009d71 	.word	0x59009d71
 8001784:	3eb1042e 	.word	0x3eb1042e
 8001788:	e43d7d7b 	.word	0xe43d7d7b
 800178c:	3f919b01 	.word	0x3f919b01
 8001790:	19112f4a 	.word	0x19112f4a
 8001794:	40857b68 	.word	0x40857b68
 8001798:	2000018c 	.word	0x2000018c
 800179c:	200000b4 	.word	0x200000b4
 80017a0:	200000d4 	.word	0x200000d4
 80017a4:	20000000 	.word	0x20000000
 80017a8:	2000009c 	.word	0x2000009c
 80017ac:	200000d0 	.word	0x200000d0
 80017b0:	40080000 	.word	0x40080000
 80017b4:	200000cc 	.word	0x200000cc
 80017b8:	43480000 	.word	0x43480000
 80017bc:	44228000 	.word	0x44228000
 80017c0:	41a00000 	.word	0x41a00000
 80017c4:	41200000 	.word	0x41200000
 80017c8:	43c80000 	.word	0x43c80000
 80017cc:	42c80000 	.word	0x42c80000

080017d0 <SPI_CS_ENABLE>:
 * | PA4 | SOFT SLAVE |	CSS     |
 *  ----------------------------
 */

void SPI_CS_ENABLE(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2110      	movs	r1, #16
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <SPI_CS_ENABLE+0x14>)
 80017da:	f001 f978 	bl	8002ace <HAL_GPIO_WritePin>
	}while(0);
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40010800 	.word	0x40010800

080017e8 <SPI_CS_DISABLE>:

void SPI_CS_DISABLE(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2110      	movs	r1, #16
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <SPI_CS_DISABLE+0x14>)
 80017f2:	f001 f96c 	bl	8002ace <HAL_GPIO_WritePin>
	}while(0);
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40010800 	.word	0x40010800

08001800 <SPI_Transmit>:
void SPI_Transmit(SPI_HandleTypeDef *hspi, uint16_t data) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
    // 2nd parameter - pData: pointer to data buffer
    HAL_SPI_Transmit(hspi, (uint8_t *) &data, 1, 1000);
 800180c:	1cb9      	adds	r1, r7, #2
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	2201      	movs	r2, #1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f001 fe15 	bl	8003444 <HAL_SPI_Transmit>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <app_InitMAX7219>:

void app_InitMAX7219(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    SPI_CS_ENABLE();
 8001828:	f7ff ffd2 	bl	80017d0 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, DECODE_MODE);
 800182c:	2109      	movs	r1, #9
 800182e:	4823      	ldr	r0, [pc, #140]	; (80018bc <app_InitMAX7219+0x98>)
 8001830:	f7ff ffe6 	bl	8001800 <SPI_Transmit>
    SPI_Transmit(&hspi1, 0xff);
 8001834:	21ff      	movs	r1, #255	; 0xff
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <app_InitMAX7219+0x98>)
 8001838:	f7ff ffe2 	bl	8001800 <SPI_Transmit>
    SPI_CS_DISABLE();
 800183c:	f7ff ffd4 	bl	80017e8 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 8001840:	f7ff ffc6 	bl	80017d0 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, INTENSITY);
 8001844:	210a      	movs	r1, #10
 8001846:	481d      	ldr	r0, [pc, #116]	; (80018bc <app_InitMAX7219+0x98>)
 8001848:	f7ff ffda 	bl	8001800 <SPI_Transmit>
    SPI_Transmit(&hspi1, BRIGHTNESS); 	/* Selecciona el nivel de brillo del display de 7 segmentos */
 800184c:	210d      	movs	r1, #13
 800184e:	481b      	ldr	r0, [pc, #108]	; (80018bc <app_InitMAX7219+0x98>)
 8001850:	f7ff ffd6 	bl	8001800 <SPI_Transmit>
    SPI_CS_DISABLE();
 8001854:	f7ff ffc8 	bl	80017e8 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 8001858:	f7ff ffba 	bl	80017d0 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, SCAN_LIMIT);
 800185c:	210b      	movs	r1, #11
 800185e:	4817      	ldr	r0, [pc, #92]	; (80018bc <app_InitMAX7219+0x98>)
 8001860:	f7ff ffce 	bl	8001800 <SPI_Transmit>
    SPI_Transmit(&hspi1, 0x05);
 8001864:	2105      	movs	r1, #5
 8001866:	4815      	ldr	r0, [pc, #84]	; (80018bc <app_InitMAX7219+0x98>)
 8001868:	f7ff ffca 	bl	8001800 <SPI_Transmit>
    SPI_CS_DISABLE();
 800186c:	f7ff ffbc 	bl	80017e8 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 8001870:	f7ff ffae 	bl	80017d0 <SPI_CS_ENABLE>
    SPI_Transmit(&hspi1, SHUTDOWN);
 8001874:	210c      	movs	r1, #12
 8001876:	4811      	ldr	r0, [pc, #68]	; (80018bc <app_InitMAX7219+0x98>)
 8001878:	f7ff ffc2 	bl	8001800 <SPI_Transmit>
    SPI_Transmit(&hspi1, NORMAL_OPERATION);
 800187c:	2101      	movs	r1, #1
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <app_InitMAX7219+0x98>)
 8001880:	f7ff ffbe 	bl	8001800 <SPI_Transmit>
    SPI_CS_DISABLE();
 8001884:	f7ff ffb0 	bl	80017e8 <SPI_CS_DISABLE>

    SPI_CS_ENABLE();
 8001888:	f7ff ffa2 	bl	80017d0 <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1, DISPLAY_TEST);
 800188c:	210f      	movs	r1, #15
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <app_InitMAX7219+0x98>)
 8001890:	f7ff ffb6 	bl	8001800 <SPI_Transmit>
	SPI_Transmit(&hspi1, ENABLE_TEST_MODE);
 8001894:	2101      	movs	r1, #1
 8001896:	4809      	ldr	r0, [pc, #36]	; (80018bc <app_InitMAX7219+0x98>)
 8001898:	f7ff ffb2 	bl	8001800 <SPI_Transmit>
	SPI_CS_DISABLE();
 800189c:	f7ff ffa4 	bl	80017e8 <SPI_CS_DISABLE>

	SPI_CS_ENABLE();
 80018a0:	f7ff ff96 	bl	80017d0 <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1, DISPLAY_TEST);
 80018a4:	210f      	movs	r1, #15
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <app_InitMAX7219+0x98>)
 80018a8:	f7ff ffaa 	bl	8001800 <SPI_Transmit>
	SPI_Transmit(&hspi1, DISABLE_TEST_MODE);
 80018ac:	2100      	movs	r1, #0
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <app_InitMAX7219+0x98>)
 80018b0:	f7ff ffa6 	bl	8001800 <SPI_Transmit>
	SPI_CS_DISABLE();
 80018b4:	f7ff ff98 	bl	80017e8 <SPI_CS_DISABLE>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000134 	.word	0x20000134

080018c0 <app_NumeroAMAX7219>:

void app_NumeroAMAX7219(uint32_t Numero, uint8_t Numero_displays)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	  volatile uint8_t i;
	  for(i = Numero_displays ;(Numero > 0) || (Numero_displays - i >= 0) ; Numero/=10,i--)
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e024      	b.n	800191c <app_NumeroAMAX7219+0x5c>
	  {
		SPI_CS_ENABLE();
 80018d2:	f7ff ff7d 	bl	80017d0 <SPI_CS_ENABLE>
		SPI_Transmit(&hspi1,i);
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	4816      	ldr	r0, [pc, #88]	; (8001938 <app_NumeroAMAX7219+0x78>)
 80018e0:	f7ff ff8e 	bl	8001800 <SPI_Transmit>
	    SPI_Transmit(&hspi1,Numero%10);
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <app_NumeroAMAX7219+0x7c>)
 80018e8:	fba3 2301 	umull	r2, r3, r3, r1
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	1aca      	subs	r2, r1, r3
 80018f8:	b293      	uxth	r3, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	480e      	ldr	r0, [pc, #56]	; (8001938 <app_NumeroAMAX7219+0x78>)
 80018fe:	f7ff ff7f 	bl	8001800 <SPI_Transmit>
	    SPI_CS_DISABLE();
 8001902:	f7ff ff71 	bl	80017e8 <SPI_CS_DISABLE>
	  for(i = Numero_displays ;(Numero > 0) || (Numero_displays - i >= 0) ; Numero/=10,i--)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a0c      	ldr	r2, [pc, #48]	; (800193c <app_NumeroAMAX7219+0x7c>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1d7      	bne.n	80018d2 <app_NumeroAMAX7219+0x12>
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	dad1      	bge.n	80018d2 <app_NumeroAMAX7219+0x12>
	  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000134 	.word	0x20000134
 800193c:	cccccccd 	.word	0xcccccccd

08001940 <app_LimpiarDisplays>:
	    SPI_Transmit(&hspi1, Brillo);
	    SPI_CS_DISABLE();
	  }
}
void app_LimpiarDisplays(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
	for(uint8_t i = 1; i < 6;i++)
 8001946:	2301      	movs	r3, #1
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	e010      	b.n	800196e <app_LimpiarDisplays+0x2e>
	{
	SPI_CS_ENABLE();
 800194c:	f7ff ff40 	bl	80017d0 <SPI_CS_ENABLE>
	SPI_Transmit(&hspi1,i);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	480a      	ldr	r0, [pc, #40]	; (8001980 <app_LimpiarDisplays+0x40>)
 8001958:	f7ff ff52 	bl	8001800 <SPI_Transmit>
	SPI_Transmit(&hspi1,0x00);
 800195c:	2100      	movs	r1, #0
 800195e:	4808      	ldr	r0, [pc, #32]	; (8001980 <app_LimpiarDisplays+0x40>)
 8001960:	f7ff ff4e 	bl	8001800 <SPI_Transmit>
	SPI_CS_DISABLE();
 8001964:	f7ff ff40 	bl	80017e8 <SPI_CS_DISABLE>
	for(uint8_t i = 1; i < 6;i++)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	3301      	adds	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d9eb      	bls.n	800194c <app_LimpiarDisplays+0xc>
	}
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000134 	.word	0x20000134

08001984 <PIDInit>:

PIDControl pid;
void PIDInit(float kp, float ki, float kd,
             float sampleTimeSeconds, float minOutput, float maxOutput, 
             PIDMode mode, PIDDirection controllerDirection)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
    pid.controllerDirection = DIRECT;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <PIDInit+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pid.mode = AUTOMATIC;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <PIDInit+0x58>)
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    if(sampleTimeSeconds > 0.0f)
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f7ff fb28 	bl	8000ffc <__aeabi_fcmpgt>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <PIDInit+0x36>
    {
        pid.sampleTime = sampleTimeSeconds;
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <PIDInit+0x58>)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6293      	str	r3, [r2, #40]	; 0x28
 80019b8:	e003      	b.n	80019c2 <PIDInit+0x3e>
    }
    else
    {
        // If the passed parameter was incorrect, set to 1 second
        pid.sampleTime = 1.0f;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <PIDInit+0x58>)
 80019bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    PIDOutputLimitsSet(minOutput, maxOutput);
 80019c2:	69f9      	ldr	r1, [r7, #28]
 80019c4:	69b8      	ldr	r0, [r7, #24]
 80019c6:	f000 f8a5 	bl	8001b14 <PIDOutputLimitsSet>
    PIDTuningsSet(kp, ki, kd);
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f8f2 	bl	8001bb8 <PIDTuningsSet>
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200001d8 	.word	0x200001d8

080019e0 <PIDCompute>:
        
bool PIDCompute(void)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
    float error, dInput;

    if(pid.mode == MANUAL)
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <PIDCompute+0x130>)
 80019e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <PIDCompute+0x14>
    {
        return false;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e088      	b.n	8001b06 <PIDCompute+0x126>
    }
    
    /* Error clasico de PID */
    error = (pid.setpoint) - (pid.input);
 80019f4:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <PIDCompute+0x130>)
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	4a45      	ldr	r2, [pc, #276]	; (8001b10 <PIDCompute+0x130>)
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f836 	bl	8000a70 <__aeabi_fsub>
 8001a04:	4603      	mov	r3, r0
 8001a06:	607b      	str	r3, [r7, #4]
    
    /* Calculo de la parte integrativa */
    pid.iTerm += (pid.alteredKi) * error;
 8001a08:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <PIDCompute+0x130>)
 8001a0a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001a0c:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <PIDCompute+0x130>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f936 	bl	8000c84 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff f829 	bl	8000a74 <__addsf3>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <PIDCompute+0x130>)
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
    
    // Constrain the integrator to make sure it does not exceed output bounds
    pid.iTerm = CONSTRAIN( (pid.iTerm), (pid.outMin), (pid.outMax) );
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <PIDCompute+0x130>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <PIDCompute+0x130>)
 8001a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fac3 	bl	8000fc0 <__aeabi_fcmplt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <PIDCompute+0x66>
 8001a40:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <PIDCompute+0x130>)
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	e00f      	b.n	8001a66 <PIDCompute+0x86>
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <PIDCompute+0x130>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <PIDCompute+0x130>)
 8001a4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fad3 	bl	8000ffc <__aeabi_fcmpgt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <PIDCompute+0x82>
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <PIDCompute+0x130>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	e001      	b.n	8001a66 <PIDCompute+0x86>
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <PIDCompute+0x130>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <PIDCompute+0x130>)
 8001a68:	6253      	str	r3, [r2, #36]	; 0x24
    
    /* Determinar la parte derivativa de la lectura y el error derivativo de la lectura */
    dInput = (pid.input) - (pid.lastInput);
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <PIDCompute+0x130>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <PIDCompute+0x130>)
 8001a70:	6852      	ldr	r2, [r2, #4]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fffb 	bl	8000a70 <__aeabi_fsub>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	603b      	str	r3, [r7, #0]
    
    /* Realiza el ultimo calculo y lo guarda en la variable salida */
    pid.output = (pid.alteredKp) * error + (pid.iTerm) - (pid.alteredKd) * dInput;
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <PIDCompute+0x130>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f8fd 	bl	8000c84 <__aeabi_fmul>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <PIDCompute+0x130>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	4610      	mov	r0, r2
 8001a96:	f7fe ffed 	bl	8000a74 <__addsf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <PIDCompute+0x130>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f8ed 	bl	8000c84 <__aeabi_fmul>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4619      	mov	r1, r3
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7fe ffde 	bl	8000a70 <__aeabi_fsub>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <PIDCompute+0x130>)
 8001aba:	609a      	str	r2, [r3, #8]
    
    // Bound the output
    pid.output = CONSTRAIN( (pid.output), (pid.outMin), (pid.outMax) );
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <PIDCompute+0x130>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <PIDCompute+0x130>)
 8001ac2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fa7a 	bl	8000fc0 <__aeabi_fcmplt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <PIDCompute+0xf8>
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <PIDCompute+0x130>)
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	e00f      	b.n	8001af8 <PIDCompute+0x118>
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <PIDCompute+0x130>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <PIDCompute+0x130>)
 8001ade:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fa8a 	bl	8000ffc <__aeabi_fcmpgt>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <PIDCompute+0x114>
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <PIDCompute+0x130>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	e001      	b.n	8001af8 <PIDCompute+0x118>
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <PIDCompute+0x130>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <PIDCompute+0x130>)
 8001afa:	6093      	str	r3, [r2, #8]
    
    /* Manda el valor actual de la lectura del sensor a una lectura previa */
    pid.lastInput = pid.input;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <PIDCompute+0x130>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <PIDCompute+0x130>)
 8001b02:	6053      	str	r3, [r2, #4]
    
    return true;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200001d8 	.word	0x200001d8

08001b14 <PIDOutputLimitsSet>:
    pid.mode = mode;
}

void 
PIDOutputLimitsSet(float min, float max)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    // Check if the parameters are valid
    if(min >= max)
 8001b1e:	6839      	ldr	r1, [r7, #0]
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fa61 	bl	8000fe8 <__aeabi_fcmpge>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d13f      	bne.n	8001bac <PIDOutputLimitsSet+0x98>
    {
        return;
    }
    
    // Save the parameters
    pid.outMin = min;
 8001b2c:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	62d3      	str	r3, [r2, #44]	; 0x2c
    pid.outMax = max;
 8001b32:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
    
    // If in automatic, apply the new constraints
    if(pid.mode == AUTOMATIC)
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d135      	bne.n	8001bae <PIDOutputLimitsSet+0x9a>
    {
        pid.output = CONSTRAIN(pid.output, min, max);
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fa57 	bl	8000ffc <__aeabi_fcmpgt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <PIDOutputLimitsSet+0x44>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e00c      	b.n	8001b72 <PIDOutputLimitsSet+0x5e>
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f7ff fa2e 	bl	8000fc0 <__aeabi_fcmplt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <PIDOutputLimitsSet+0x5a>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	e001      	b.n	8001b72 <PIDOutputLimitsSet+0x5e>
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b74:	6093      	str	r3, [r2, #8]
        pid.iTerm  = CONSTRAIN(pid.iTerm,  min, max);
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fa3d 	bl	8000ffc <__aeabi_fcmpgt>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <PIDOutputLimitsSet+0x78>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	e00c      	b.n	8001ba6 <PIDOutputLimitsSet+0x92>
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	4619      	mov	r1, r3
 8001b92:	6838      	ldr	r0, [r7, #0]
 8001b94:	f7ff fa14 	bl	8000fc0 <__aeabi_fcmplt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <PIDOutputLimitsSet+0x8e>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	e001      	b.n	8001ba6 <PIDOutputLimitsSet+0x92>
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <PIDOutputLimitsSet+0xa0>)
 8001ba8:	6253      	str	r3, [r2, #36]	; 0x24
 8001baa:	e000      	b.n	8001bae <PIDOutputLimitsSet+0x9a>
        return;
 8001bac:	bf00      	nop
    }
}
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200001d8 	.word	0x200001d8

08001bb8 <PIDTuningsSet>:

void 
PIDTuningsSet(float kp, float ki, float kd)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff f9f9 	bl	8000fc0 <__aeabi_fcmplt>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d147      	bne.n	8001c64 <PIDTuningsSet+0xac>
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	68b8      	ldr	r0, [r7, #8]
 8001bda:	f7ff f9f1 	bl	8000fc0 <__aeabi_fcmplt>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d13f      	bne.n	8001c64 <PIDTuningsSet+0xac>
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff f9e9 	bl	8000fc0 <__aeabi_fcmplt>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d137      	bne.n	8001c64 <PIDTuningsSet+0xac>
    {
        return;
    }
    
    // Save the parameters for displaying purposes
    pid.dispKp = kp;
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	60d3      	str	r3, [r2, #12]
    pid.dispKi = ki;
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6113      	str	r3, [r2, #16]
    pid.dispKd = kd;
 8001c00:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6153      	str	r3, [r2, #20]
    
    // Alter the parameters for PID
    pid.alteredKp = kp;
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6193      	str	r3, [r2, #24]
    pid.alteredKi = ki * pid.sampleTime;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f836 	bl	8000c84 <__aeabi_fmul>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c1e:	61da      	str	r2, [r3, #28]
    pid.alteredKd = kd / pid.sampleTime;
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff f8e0 	bl	8000dec <__aeabi_fdiv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c32:	621a      	str	r2, [r3, #32]
    
    // Apply reverse direction to the altered values if necessary
    if(pid.controllerDirection == REVERSE)
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d113      	bne.n	8001c66 <PIDTuningsSet+0xae>
    {
        pid.alteredKp = -(pid.alteredKp);
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c48:	6193      	str	r3, [r2, #24]
        pid.alteredKi = -(pid.alteredKi);
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c54:	61d3      	str	r3, [r2, #28]
        pid.alteredKd = -(pid.alteredKd);
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c5e:	4a03      	ldr	r2, [pc, #12]	; (8001c6c <PIDTuningsSet+0xb4>)
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	e000      	b.n	8001c66 <PIDTuningsSet+0xae>
        return;
 8001c64:	bf00      	nop
    }
}
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200001d8 	.word	0x200001d8

08001c70 <PIDSetpointSet>:
        // Save the new sampling time
        pid.sampleTime = sampleTimeSeconds;
    }
}

void PIDSetpointSet(float setpoint) { pid.setpoint = setpoint; }
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <PIDSetpointSet+0x18>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	200001d8 	.word	0x200001d8

08001c8c <PIDInputSet>:
//      pid - The address of a PIDControl instantiation.
//      input - The value the controller will work with.
// Returns:
//      Nothing.
//
void PIDInputSet(float input) { pid.input = input; }
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <PIDInputSet+0x18>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	200001d8 	.word	0x200001d8

08001ca8 <PIDOutputGet>:
 {
	 return pid.controllerDirection;
 }

float PIDOutputGet(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	return pid.output;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <PIDOutputGet+0x10>)
 8001cae:	689b      	ldr	r3, [r3, #8]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	200001d8 	.word	0x200001d8

08001cbc <HAL_GPIO_EXTI_Callback>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_pin == DetectorCero_Pin) {
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ccc:	d102      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x18>
		Bandera_DetectorCero = 0;
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x24>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
	} else {
		/* No realiza ninguna funcion */
	}
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000006 	.word	0x20000006

08001ce4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	/* Si la interrupcion se encuentra en el canal 1 */
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7f1b      	ldrb	r3, [r3, #28]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d149      	bne.n	8001d88 <HAL_TIM_IC_CaptureCallback+0xa4>
		/* Bandera que determina el estado de la interrupcion */
		if (Primer_valor == 0) {
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_TIM_IC_CaptureCallback+0x34>
			/* Se realiza la captura del primer valor */
			Valor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f002 f999 	bl	800403c <HAL_TIM_ReadCapturedValue>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001d0e:	6013      	str	r3, [r2, #0]
			Primer_valor = 1;  // set the first value captured as true
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
			Frecuencia_final = (2 * HAL_RCC_GetPCLK2Freq()) / Diferencia;
			/* La bandera cambia de estado, y se vuelve a comenzar el conteo de la frecuencia */
			Primer_valor = 0;
		}
	}
}
 8001d16:	e037      	b.n	8001d88 <HAL_TIM_IC_CaptureCallback+0xa4>
		else if (Primer_valor) {
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d033      	beq.n	8001d88 <HAL_TIM_IC_CaptureCallback+0xa4>
			Valor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f002 f98a 	bl	800403c <HAL_TIM_ReadCapturedValue>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001d2c:	6013      	str	r3, [r2, #0]
			if (Valor2 > Valor1) {
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d907      	bls.n	8001d4a <HAL_TIM_IC_CaptureCallback+0x66>
				Diferencia = Valor2 - Valor1;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e011      	b.n	8001d6e <HAL_TIM_IC_CaptureCallback+0x8a>
			else if (Valor2 < Valor1) {
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d209      	bcs.n	8001d6a <HAL_TIM_IC_CaptureCallback+0x86>
				Diferencia = ((0xffff - Valor1) + Valor2) + 1;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e001      	b.n	8001d6e <HAL_TIM_IC_CaptureCallback+0x8a>
				Error_Handler();
 8001d6a:	f000 fa35 	bl	80021d8 <Error_Handler>
			Frecuencia_final = (2 * HAL_RCC_GetPCLK2Freq()) / Diferencia;
 8001d6e:	f001 fab3 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8001d72:	4603      	mov	r3, r0
 8001d74:	005a      	lsls	r2, r3, #1
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001d80:	6013      	str	r3, [r2, #0]
			Primer_valor = 0;
 8001d82:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200000e8 	.word	0x200000e8
 8001d94:	200000d8 	.word	0x200000d8
 8001d98:	200000dc 	.word	0x200000dc
 8001d9c:	200000e0 	.word	0x200000e0
 8001da0:	200000e4 	.word	0x200000e4

08001da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da8:	f000 fb86 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dac:	f000 f82e 	bl	8001e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db0:	f000 f95e 	bl	8002070 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001db4:	f000 f89c 	bl	8001ef0 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001db8:	f000 f864 	bl	8001e84 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001dbc:	f000 f8e8 	bl	8001f90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <main+0x58>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <main+0x58>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dce:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim1);
 8001dd0:	480b      	ldr	r0, [pc, #44]	; (8001e00 <main+0x5c>)
 8001dd2:	f001 fd69 	bl	80038a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	480a      	ldr	r0, [pc, #40]	; (8001e04 <main+0x60>)
 8001dda:	f001 fe0f 	bl	80039fc <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001dde:	4809      	ldr	r0, [pc, #36]	; (8001e04 <main+0x60>)
 8001de0:	f001 fd62 	bl	80038a8 <HAL_TIM_Base_Start_IT>
  app_InitMAX7219();
 8001de4:	f7ff fd1e 	bl	8001824 <app_InitMAX7219>
  app_LimpiarDisplays();
 8001de8:	f7ff fdaa 	bl	8001940 <app_LimpiarDisplays>
  {


	  //
	  //app_Dimmer();
	  app_PIDDimmer(Frecuencia_final);
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <main+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fbac 	bl	8001550 <app_PIDDimmer>
 8001df8:	e7f8      	b.n	8001dec <main+0x48>
 8001dfa:	bf00      	nop
 8001dfc:	20000134 	.word	0x20000134
 8001e00:	200000ec 	.word	0x200000ec
 8001e04:	20000190 	.word	0x20000190
 8001e08:	200000e4 	.word	0x200000e4

08001e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b090      	sub	sp, #64	; 0x40
 8001e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	2228      	movs	r2, #40	; 0x28
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fc3a 	bl	8004694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e32:	2301      	movs	r3, #1
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e36:	2310      	movs	r3, #16
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3e:	f107 0318 	add.w	r3, r7, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fe74 	bl	8002b30 <HAL_RCC_OscConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001e4e:	f000 f9c3 	bl	80021d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e52:	230f      	movs	r3, #15
 8001e54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f8e0 	bl	8003030 <HAL_RCC_ClockConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e76:	f000 f9af 	bl	80021d8 <Error_Handler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3740      	adds	r7, #64	; 0x40
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI1_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed6:	f001 fa31 	bl	800333c <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 f97a 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000134 	.word	0x20000134
 8001eec:	40013000 	.word	0x40013000

08001ef0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <MX_TIM1_Init+0x9c>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f14:	224f      	movs	r2, #79	; 0x4f
 8001f16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f38:	4813      	ldr	r0, [pc, #76]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f3a:	f001 fc65 	bl	8003808 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 f948 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f56:	f001 ffad 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f60:	f000 f93a 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_TIM1_Init+0x98>)
 8001f72:	f002 faf5 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f7c:	f000 f92c 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200000ec 	.word	0x200000ec
 8001f8c:	40012c00 	.word	0x40012c00

08001f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0318 	add.w	r3, r7, #24
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <MX_TIM2_Init+0xdc>)
 8001fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <MX_TIM2_Init+0xdc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <MX_TIM2_Init+0xdc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <MX_TIM2_Init+0xdc>)
 8001fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <MX_TIM2_Init+0xdc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <MX_TIM2_Init+0xdc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fe2:	4822      	ldr	r0, [pc, #136]	; (800206c <MX_TIM2_Init+0xdc>)
 8001fe4:	f001 fc10 	bl	8003808 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001fee:	f000 f8f3 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0318 	add.w	r3, r7, #24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	481b      	ldr	r0, [pc, #108]	; (800206c <MX_TIM2_Init+0xdc>)
 8002000:	f001 ff58 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800200a:	f000 f8e5 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800200e:	4817      	ldr	r0, [pc, #92]	; (800206c <MX_TIM2_Init+0xdc>)
 8002010:	f001 fc9c 	bl	800394c <HAL_TIM_IC_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800201a:	f000 f8dd 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	4619      	mov	r1, r3
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <MX_TIM2_Init+0xdc>)
 800202e:	f002 fa97 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002038:	f000 f8ce 	bl	80021d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800203c:	2300      	movs	r3, #0
 800203e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002040:	2301      	movs	r3, #1
 8002042:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <MX_TIM2_Init+0xdc>)
 8002054:	f001 fe9a 	bl	8003d8c <HAL_TIM_IC_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800205e:	f000 f8bb 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000190 	.word	0x20000190

08002070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <MX_GPIO_Init+0x154>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <MX_GPIO_Init+0x154>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <MX_GPIO_Init+0x154>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209c:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <MX_GPIO_Init+0x154>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020a2:	f043 0320 	orr.w	r3, r3, #32
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a42      	ldr	r2, [pc, #264]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <MX_GPIO_Init+0x154>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ea:	4837      	ldr	r0, [pc, #220]	; (80021c8 <MX_GPIO_Init+0x158>)
 80020ec:	f000 fcef 	bl	8002ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2110      	movs	r1, #16
 80020f4:	4835      	ldr	r0, [pc, #212]	; (80021cc <MX_GPIO_Init+0x15c>)
 80020f6:	f000 fcea 	bl	8002ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002100:	4833      	ldr	r0, [pc, #204]	; (80021d0 <MX_GPIO_Init+0x160>)
 8002102:	f000 fce4 	bl	8002ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2302      	movs	r3, #2
 8002116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	4619      	mov	r1, r3
 800211e:	482a      	ldr	r0, [pc, #168]	; (80021c8 <MX_GPIO_Init+0x158>)
 8002120:	f000 fb3a 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSS_Pin */
  GPIO_InitStruct.Pin = CSS_Pin;
 8002124:	2310      	movs	r3, #16
 8002126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002128:	2301      	movs	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2302      	movs	r3, #2
 8002132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	4619      	mov	r1, r3
 800213a:	4824      	ldr	r0, [pc, #144]	; (80021cc <MX_GPIO_Init+0x15c>)
 800213c:	f000 fb2c 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton0_Pin Boton1_Pin Boton2_Pin */
  GPIO_InitStruct.Pin = Boton0_Pin|Boton1_Pin|Boton2_Pin;
 8002140:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4619      	mov	r1, r3
 8002154:	481e      	ldr	r0, [pc, #120]	; (80021d0 <MX_GPIO_Init+0x160>)
 8002156:	f000 fb1f 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : DetectorCero_Pin */
  GPIO_InitStruct.Pin = DetectorCero_Pin;
 800215a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <MX_GPIO_Init+0x164>)
 8002162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DetectorCero_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	4619      	mov	r1, r3
 800216e:	4818      	ldr	r0, [pc, #96]	; (80021d0 <MX_GPIO_Init+0x160>)
 8002170:	f000 fb12 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : Activacion_Router_Pin */
  GPIO_InitStruct.Pin = Activacion_Router_Pin;
 8002174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Activacion_Router_GPIO_Port, &GPIO_InitStruct);
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4619      	mov	r1, r3
 8002188:	4810      	ldr	r0, [pc, #64]	; (80021cc <MX_GPIO_Init+0x15c>)
 800218a:	f000 fb05 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSR_Pin */
  GPIO_InitStruct.Pin = SSR_Pin;
 800218e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SSR_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4619      	mov	r1, r3
 80021a6:	480a      	ldr	r0, [pc, #40]	; (80021d0 <MX_GPIO_Init+0x160>)
 80021a8:	f000 faf6 	bl	8002798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2028      	movs	r0, #40	; 0x28
 80021b2:	f000 faba 	bl	800272a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021b6:	2028      	movs	r0, #40	; 0x28
 80021b8:	f000 fad3 	bl	8002762 <HAL_NVIC_EnableIRQ>

}
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40011000 	.word	0x40011000
 80021cc:	40010800 	.word	0x40010800
 80021d0:	40010c00 	.word	0x40010c00
 80021d4:	10110000 	.word	0x10110000

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_MspInit+0x5c>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_MspInit+0x5c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6193      	str	r3, [r2, #24]
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_MspInit+0x5c>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_MspInit+0x5c>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_MspInit+0x5c>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_MspInit+0x5c>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_MspInit+0x60>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_MspInit+0x60>)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000

08002248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_SPI_MspInit+0x88>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d12f      	bne.n	80022c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_SPI_MspInit+0x8c>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_SPI_MspInit+0x8c>)
 800226e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_SPI_MspInit+0x8c>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_SPI_MspInit+0x8c>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <HAL_SPI_MspInit+0x8c>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_SPI_MspInit+0x8c>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002298:	23a0      	movs	r3, #160	; 0xa0
 800229a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4619      	mov	r1, r3
 80022aa:	480b      	ldr	r0, [pc, #44]	; (80022d8 <HAL_SPI_MspInit+0x90>)
 80022ac:	f000 fa74 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022b0:	2340      	movs	r3, #64	; 0x40
 80022b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <HAL_SPI_MspInit+0x90>)
 80022c4:	f000 fa68 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40013000 	.word	0x40013000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010800 	.word	0x40010800

080022dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0318 	add.w	r3, r7, #24
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <HAL_TIM_Base_MspInit+0xa4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d10c      	bne.n	8002316 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 8002302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002314:	e030      	b.n	8002378 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d12b      	bne.n	8002378 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002320:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	61d3      	str	r3, [r2, #28]
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_TIM_Base_MspInit+0xa8>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002350:	2301      	movs	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	4619      	mov	r1, r3
 8002362:	4809      	ldr	r0, [pc, #36]	; (8002388 <HAL_TIM_Base_MspInit+0xac>)
 8002364:	f000 fa18 	bl	8002798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	201c      	movs	r0, #28
 800236e:	f000 f9dc 	bl	800272a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002372:	201c      	movs	r0, #28
 8002374:	f000 f9f5 	bl	8002762 <HAL_NVIC_EnableIRQ>
}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40010800 	.word	0x40010800

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <HardFault_Handler+0x4>

0800239e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <MemManage_Handler+0x4>

080023a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <BusFault_Handler+0x4>

080023aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <UsageFault_Handler+0x4>

080023b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d8:	f000 f8b4 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM2_IRQHandler+0x10>)
 80023e6:	f001 fbc9 	bl	8003b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000190 	.word	0x20000190

080023f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80023f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023fc:	f000 fb80 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <SystemInit+0x5c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <SystemInit+0x5c>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <SystemInit+0x5c>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4911      	ldr	r1, [pc, #68]	; (8002460 <SystemInit+0x5c>)
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <SystemInit+0x60>)
 800241c:	4013      	ands	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <SystemInit+0x5c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <SystemInit+0x5c>)
 8002426:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <SystemInit+0x5c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <SystemInit+0x5c>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <SystemInit+0x5c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <SystemInit+0x5c>)
 8002442:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002446:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <SystemInit+0x5c>)
 800244a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800244e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SystemInit+0x64>)
 8002452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002456:	609a      	str	r2, [r3, #8]
#endif 
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40021000 	.word	0x40021000
 8002464:	f8ff0000 	.word	0xf8ff0000
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800246c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800246e:	e003      	b.n	8002478 <LoopCopyDataInit>

08002470 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002472:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002474:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002476:	3104      	adds	r1, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002478:	480a      	ldr	r0, [pc, #40]	; (80024a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800247c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800247e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002480:	d3f6      	bcc.n	8002470 <CopyDataInit>
  ldr r2, =_sbss
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002484:	e002      	b.n	800248c <LoopFillZerobss>

08002486 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002488:	f842 3b04 	str.w	r3, [r2], #4

0800248c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800248e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002490:	d3f9      	bcc.n	8002486 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002492:	f7ff ffb7 	bl	8002404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002496:	f002 f8d9 	bl	800464c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249a:	f7ff fc83 	bl	8001da4 <main>
  bx lr
 800249e:	4770      	bx	lr
  ldr r3, =_sidata
 80024a0:	08005658 	.word	0x08005658
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80024ac:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80024b0:	20000218 	.word	0x20000218

080024b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC1_2_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_Init+0x28>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_Init+0x28>)
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 f923 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f000 f808 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fe86 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x54>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f93b 	bl	800277e <HAL_SYSTICK_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e00e      	b.n	8002530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d80a      	bhi.n	800252e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002518:	2200      	movs	r2, #0
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002520:	f000 f903 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_InitTick+0x5c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000008 	.word	0x20000008
 800253c:	20000010 	.word	0x20000010
 8002540:	2000000c 	.word	0x2000000c

08002544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_IncTick+0x1c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_IncTick+0x20>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_IncTick+0x20>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	20000010 	.word	0x20000010
 8002564:	20000214 	.word	0x20000214

08002568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <HAL_GetTick+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000214 	.word	0x20000214

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <__NVIC_EnableIRQ+0x34>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	; (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f4:	f7ff ff90 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff2d 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff42 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff90 	bl	800266c <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5f 	bl	8002618 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff35 	bl	80025e0 <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffa2 	bl	80026d0 <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b08b      	sub	sp, #44	; 0x2c
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027aa:	e169      	b.n	8002a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027ac:	2201      	movs	r2, #1
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8158 	bne.w	8002a7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a9a      	ldr	r2, [pc, #616]	; (8002a38 <HAL_GPIO_Init+0x2a0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d05e      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027d4:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <HAL_GPIO_Init+0x2a0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d875      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027da:	4a98      	ldr	r2, [pc, #608]	; (8002a3c <HAL_GPIO_Init+0x2a4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d058      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027e0:	4a96      	ldr	r2, [pc, #600]	; (8002a3c <HAL_GPIO_Init+0x2a4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d86f      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027e6:	4a96      	ldr	r2, [pc, #600]	; (8002a40 <HAL_GPIO_Init+0x2a8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d052      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027ec:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <HAL_GPIO_Init+0x2a8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d869      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027f2:	4a94      	ldr	r2, [pc, #592]	; (8002a44 <HAL_GPIO_Init+0x2ac>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04c      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027f8:	4a92      	ldr	r2, [pc, #584]	; (8002a44 <HAL_GPIO_Init+0x2ac>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d863      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027fe:	4a92      	ldr	r2, [pc, #584]	; (8002a48 <HAL_GPIO_Init+0x2b0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d046      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 8002804:	4a90      	ldr	r2, [pc, #576]	; (8002a48 <HAL_GPIO_Init+0x2b0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d85d      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 800280a:	2b12      	cmp	r3, #18
 800280c:	d82a      	bhi.n	8002864 <HAL_GPIO_Init+0xcc>
 800280e:	2b12      	cmp	r3, #18
 8002810:	d859      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_GPIO_Init+0x80>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002893 	.word	0x08002893
 800281c:	0800286d 	.word	0x0800286d
 8002820:	0800287f 	.word	0x0800287f
 8002824:	080028c1 	.word	0x080028c1
 8002828:	080028c7 	.word	0x080028c7
 800282c:	080028c7 	.word	0x080028c7
 8002830:	080028c7 	.word	0x080028c7
 8002834:	080028c7 	.word	0x080028c7
 8002838:	080028c7 	.word	0x080028c7
 800283c:	080028c7 	.word	0x080028c7
 8002840:	080028c7 	.word	0x080028c7
 8002844:	080028c7 	.word	0x080028c7
 8002848:	080028c7 	.word	0x080028c7
 800284c:	080028c7 	.word	0x080028c7
 8002850:	080028c7 	.word	0x080028c7
 8002854:	080028c7 	.word	0x080028c7
 8002858:	080028c7 	.word	0x080028c7
 800285c:	08002875 	.word	0x08002875
 8002860:	08002889 	.word	0x08002889
 8002864:	4a79      	ldr	r2, [pc, #484]	; (8002a4c <HAL_GPIO_Init+0x2b4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800286a:	e02c      	b.n	80028c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e029      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	3304      	adds	r3, #4
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e024      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	3308      	adds	r3, #8
 8002884:	623b      	str	r3, [r7, #32]
          break;
 8002886:	e01f      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	330c      	adds	r3, #12
 800288e:	623b      	str	r3, [r7, #32]
          break;
 8002890:	e01a      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800289a:	2304      	movs	r3, #4
 800289c:	623b      	str	r3, [r7, #32]
          break;
 800289e:	e013      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a8:	2308      	movs	r3, #8
 80028aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	611a      	str	r2, [r3, #16]
          break;
 80028b2:	e009      	b.n	80028c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b4:	2308      	movs	r3, #8
 80028b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	615a      	str	r2, [r3, #20]
          break;
 80028be:	e003      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
          break;
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          break;
 80028c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2bff      	cmp	r3, #255	; 0xff
 80028cc:	d801      	bhi.n	80028d2 <HAL_GPIO_Init+0x13a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	e001      	b.n	80028d6 <HAL_GPIO_Init+0x13e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d802      	bhi.n	80028e4 <HAL_GPIO_Init+0x14c>
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_Init+0x152>
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3b08      	subs	r3, #8
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	210f      	movs	r1, #15
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	401a      	ands	r2, r3
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80b1 	beq.w	8002a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002918:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <HAL_GPIO_Init+0x2b8>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a4c      	ldr	r2, [pc, #304]	; (8002a50 <HAL_GPIO_Init+0x2b8>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <HAL_GPIO_Init+0x2b8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002930:	4a48      	ldr	r2, [pc, #288]	; (8002a54 <HAL_GPIO_Init+0x2bc>)
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a40      	ldr	r2, [pc, #256]	; (8002a58 <HAL_GPIO_Init+0x2c0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_GPIO_Init+0x1ec>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3f      	ldr	r2, [pc, #252]	; (8002a5c <HAL_GPIO_Init+0x2c4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00d      	beq.n	8002980 <HAL_GPIO_Init+0x1e8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3e      	ldr	r2, [pc, #248]	; (8002a60 <HAL_GPIO_Init+0x2c8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <HAL_GPIO_Init+0x1e4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3d      	ldr	r2, [pc, #244]	; (8002a64 <HAL_GPIO_Init+0x2cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_GPIO_Init+0x1e0>
 8002974:	2303      	movs	r3, #3
 8002976:	e006      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002978:	2304      	movs	r3, #4
 800297a:	e004      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 800297c:	2302      	movs	r3, #2
 800297e:	e002      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002984:	2300      	movs	r3, #0
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	f002 0203 	and.w	r2, r2, #3
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	4093      	lsls	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002996:	492f      	ldr	r1, [pc, #188]	; (8002a54 <HAL_GPIO_Init+0x2bc>)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	492c      	ldr	r1, [pc, #176]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4928      	ldr	r1, [pc, #160]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4922      	ldr	r1, [pc, #136]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
 80029e4:	e006      	b.n	80029f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	491e      	ldr	r1, [pc, #120]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	4918      	ldr	r1, [pc, #96]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	4914      	ldr	r1, [pc, #80]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d021      	beq.n	8002a6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	490e      	ldr	r1, [pc, #56]	; (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
 8002a34:	e021      	b.n	8002a7a <HAL_GPIO_Init+0x2e2>
 8002a36:	bf00      	nop
 8002a38:	10320000 	.word	0x10320000
 8002a3c:	10310000 	.word	0x10310000
 8002a40:	10220000 	.word	0x10220000
 8002a44:	10210000 	.word	0x10210000
 8002a48:	10120000 	.word	0x10120000
 8002a4c:	10110000 	.word	0x10110000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010800 	.word	0x40010800
 8002a5c:	40010c00 	.word	0x40010c00
 8002a60:	40011000 	.word	0x40011000
 8002a64:	40011400 	.word	0x40011400
 8002a68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_GPIO_Init+0x304>)
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4909      	ldr	r1, [pc, #36]	; (8002a9c <HAL_GPIO_Init+0x304>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f47f ae8e 	bne.w	80027ac <HAL_GPIO_Init+0x14>
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	372c      	adds	r7, #44	; 0x2c
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]
 8002ada:	4613      	mov	r3, r2
 8002adc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ade:	787b      	ldrb	r3, [r7, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae4:	887a      	ldrh	r2, [r7, #2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aea:	e003      	b.n	8002af4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	041a      	lsls	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	611a      	str	r2, [r3, #16]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f8cc 	bl	8001cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e26c      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b50:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d00c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b5c:	4b8f      	ldr	r3, [pc, #572]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
 8002b68:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d10b      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	4b89      	ldr	r3, [pc, #548]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x12c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d168      	bne.n	8002c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e246      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x76>
 8002b98:	4b80      	ldr	r3, [pc, #512]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e02e      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b7b      	ldr	r3, [pc, #492]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b78      	ldr	r3, [pc, #480]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a77      	ldr	r2, [pc, #476]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xbc>
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a71      	ldr	r2, [pc, #452]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bec:	4b6b      	ldr	r3, [pc, #428]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fcac 	bl	8002568 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff fca8 	bl	8002568 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1fa      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe4>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff fc98 	bl	8002568 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff fc94 	bl	8002568 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1e6      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x10c>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c76:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
 8002c82:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1ba      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4939      	ldr	r1, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7ff fc4d 	bl	8002568 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7ff fc49 	bl	8002568 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e19b      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4927      	ldr	r1, [pc, #156]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7ff fc2c 	bl	8002568 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7ff fc28 	bl	8002568 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e17a      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03a      	beq.n	8002db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7ff fc0c 	bl	8002568 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d54:	f7ff fc08 	bl	8002568 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e15a      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f000 fac4 	bl	8003300 <RCC_Delay>
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7ff fbf2 	bl	8002568 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d86:	e00f      	b.n	8002da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7ff fbee 	bl	8002568 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e140      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	42420000 	.word	0x42420000
 8002da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b9e      	ldr	r3, [pc, #632]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e9      	bne.n	8002d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a6 	beq.w	8002f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b97      	ldr	r3, [pc, #604]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b94      	ldr	r3, [pc, #592]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a93      	ldr	r2, [pc, #588]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]
 8002dde:	4b91      	ldr	r3, [pc, #580]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b8e      	ldr	r3, [pc, #568]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b8b      	ldr	r3, [pc, #556]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a8a      	ldr	r2, [pc, #552]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7ff fbaf 	bl	8002568 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7ff fbab 	bl	8002568 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	; 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0fd      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b81      	ldr	r3, [pc, #516]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x312>
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x334>
 8002e4a:	4b76      	ldr	r3, [pc, #472]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a75      	ldr	r2, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a72      	ldr	r2, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	e01c      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x356>
 8002e6c:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4a6c      	ldr	r2, [pc, #432]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a66      	ldr	r2, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	4b64      	ldr	r3, [pc, #400]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a63      	ldr	r2, [pc, #396]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff fb5f 	bl	8002568 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7ff fb5b 	bl	8002568 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0ab      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RCC_OscConfig+0x37e>
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7ff fb49 	bl	8002568 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7ff fb45 	bl	8002568 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e095      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a47      	ldr	r2, [pc, #284]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8081 	beq.w	800301a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b42      	ldr	r3, [pc, #264]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d061      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d146      	bne.n	8002fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b3f      	ldr	r3, [pc, #252]	; (800302c <HAL_RCC_OscConfig+0x4fc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff fb19 	bl	8002568 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7ff fb15 	bl	8002568 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e067      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4c:	4b35      	ldr	r3, [pc, #212]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f62:	4b30      	ldr	r3, [pc, #192]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	492d      	ldr	r1, [pc, #180]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a19      	ldr	r1, [r3, #32]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	430b      	orrs	r3, r1
 8002f86:	4927      	ldr	r1, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x4fc>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7ff fae9 	bl	8002568 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7ff fae5 	bl	8002568 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e037      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46a>
 8002fb8:	e02f      	b.n	800301a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_RCC_OscConfig+0x4fc>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7ff fad2 	bl	8002568 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff face 	bl	8002568 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e020      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x498>
 8002fe6:	e018      	b.n	800301a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e013      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	429a      	cmp	r2, r3
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	40007000 	.word	0x40007000
 800302c:	42420060 	.word	0x42420060

08003030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0d0      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d910      	bls.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	4965      	ldr	r1, [pc, #404]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0b8      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800308c:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a52      	ldr	r2, [pc, #328]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b50      	ldr	r3, [pc, #320]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	494d      	ldr	r1, [pc, #308]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d040      	beq.n	8003150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d115      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e073      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06b      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4936      	ldr	r1, [pc, #216]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7ff fa22 	bl	8002568 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7ff fa1e 	bl	8002568 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e053      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d210      	bcs.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	4922      	ldr	r1, [pc, #136]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e032      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4916      	ldr	r1, [pc, #88]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	490e      	ldr	r1, [pc, #56]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031be:	f000 f821 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	490a      	ldr	r1, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	5ccb      	ldrb	r3, [r1, r3]
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x1cc>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1d0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff f980 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40021000 	.word	0x40021000
 80031f8:	080055f0 	.word	0x080055f0
 80031fc:	20000008 	.word	0x20000008
 8003200:	2000000c 	.word	0x2000000c

08003204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b490      	push	{r4, r7}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800320a:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800320c:	1d3c      	adds	r4, r7, #4
 800320e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003214:	f240 2301 	movw	r3, #513	; 0x201
 8003218:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d002      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x40>
 800323e:	2b08      	cmp	r3, #8
 8003240:	d003      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x46>
 8003242:	e02d      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003246:	623b      	str	r3, [r7, #32]
      break;
 8003248:	e02d      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	0c9b      	lsrs	r3, r3, #18
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003256:	4413      	add	r3, r2
 8003258:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800325c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	0c5b      	lsrs	r3, r3, #17
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003276:	4413      	add	r3, r2
 8003278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800327c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003282:	fb02 f203 	mul.w	r2, r2, r3
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	e004      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	623b      	str	r3, [r7, #32]
      break;
 800329e:	e002      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc90      	pop	{r4, r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	080055e0 	.word	0x080055e0
 80032b8:	40021000 	.word	0x40021000
 80032bc:	007a1200 	.word	0x007a1200
 80032c0:	003d0900 	.word	0x003d0900

080032c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	20000008 	.word	0x20000008

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff fff2 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08005600 	.word	0x08005600

08003300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <RCC_Delay+0x34>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <RCC_Delay+0x38>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0a5b      	lsrs	r3, r3, #9
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800331c:	bf00      	nop
  }
  while (Delay --);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	60fa      	str	r2, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f9      	bne.n	800331c <RCC_Delay+0x1c>
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000008 	.word	0x20000008
 8003338:	10624dd3 	.word	0x10624dd3

0800333c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e076      	b.n	800343c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335e:	d009      	beq.n	8003374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
 8003366:	e005      	b.n	8003374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe ff5a 	bl	8002248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	ea42 0103 	orr.w	r1, r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	0c1a      	lsrs	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f002 0204 	and.w	r2, r2, #4
 800341a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_SPI_Transmit+0x22>
 8003462:	2302      	movs	r3, #2
 8003464:	e126      	b.n	80036b4 <HAL_SPI_Transmit+0x270>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800346e:	f7ff f87b 	bl	8002568 <HAL_GetTick>
 8003472:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d002      	beq.n	800348a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003484:	2302      	movs	r3, #2
 8003486:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003488:	e10b      	b.n	80036a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_SPI_Transmit+0x52>
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	77fb      	strb	r3, [r7, #31]
    goto error;
 800349a:	e102      	b.n	80036a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2203      	movs	r2, #3
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	88fa      	ldrh	r2, [r7, #6]
 80034ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e2:	d10f      	bne.n	8003504 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003502:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d007      	beq.n	8003522 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352a:	d14b      	bne.n	80035c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_SPI_Transmit+0xf6>
 8003534:	8afb      	ldrh	r3, [r7, #22]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d13e      	bne.n	80035b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	881a      	ldrh	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	1c9a      	adds	r2, r3, #2
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800355e:	e02b      	b.n	80035b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d112      	bne.n	8003594 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	86da      	strh	r2, [r3, #54]	; 0x36
 8003592:	e011      	b.n	80035b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003594:	f7fe ffe8 	bl	8002568 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d803      	bhi.n	80035ac <HAL_SPI_Transmit+0x168>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Transmit+0x16e>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b6:	e074      	b.n	80036a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ce      	bne.n	8003560 <HAL_SPI_Transmit+0x11c>
 80035c2:	e04c      	b.n	800365e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Transmit+0x18e>
 80035cc:	8afb      	ldrh	r3, [r7, #22]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d140      	bne.n	8003654 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	7812      	ldrb	r2, [r2, #0]
 80035de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035f8:	e02c      	b.n	8003654 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d113      	bne.n	8003630 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	86da      	strh	r2, [r3, #54]	; 0x36
 800362e:	e011      	b.n	8003654 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003630:	f7fe ff9a 	bl	8002568 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d803      	bhi.n	8003648 <HAL_SPI_Transmit+0x204>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003646:	d102      	bne.n	800364e <HAL_SPI_Transmit+0x20a>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003652:	e026      	b.n	80036a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1cd      	bne.n	80035fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8b2 	bl	80037cc <SPI_EndRxTxTransaction>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e000      	b.n	80036a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036cc:	f7fe ff4c 	bl	8002568 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036dc:	f7fe ff44 	bl	8002568 <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	0d1b      	lsrs	r3, r3, #20
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f2:	e054      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fa:	d050      	beq.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036fc:	f7fe ff34 	bl	8002568 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13d      	bne.n	800378e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d111      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	d004      	beq.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d107      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d10f      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e017      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3b01      	subs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d19b      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000008 	.word	0x20000008

080037cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	2180      	movs	r1, #128	; 0x80
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff ff6a 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e000      	b.n	8003800 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e041      	b.n	800389e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fd54 	bl	80022dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 fc60 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d001      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e03a      	b.n	8003936 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <HAL_TIM_Base_Start_IT+0x98>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x58>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ea:	d009      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x58>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <HAL_TIM_Base_Start_IT+0x9c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x58>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a13      	ldr	r2, [pc, #76]	; (8003948 <HAL_TIM_Base_Start_IT+0xa0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d111      	bne.n	8003924 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d010      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003922:	e007      	b.n	8003934 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800

0800394c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e041      	b.n	80039e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f839 	bl	80039ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f000 fbbe 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <HAL_TIM_IC_Start+0x1a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	e013      	b.n	8003a3e <HAL_TIM_IC_Start+0x42>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d104      	bne.n	8003a26 <HAL_TIM_IC_Start+0x2a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e00b      	b.n	8003a3e <HAL_TIM_IC_Start+0x42>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_IC_Start+0x3a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	e003      	b.n	8003a3e <HAL_TIM_IC_Start+0x42>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_TIM_IC_Start+0x54>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e013      	b.n	8003a78 <HAL_TIM_IC_Start+0x7c>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d104      	bne.n	8003a60 <HAL_TIM_IC_Start+0x64>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e00b      	b.n	8003a78 <HAL_TIM_IC_Start+0x7c>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d104      	bne.n	8003a70 <HAL_TIM_IC_Start+0x74>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e003      	b.n	8003a78 <HAL_TIM_IC_Start+0x7c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d102      	bne.n	8003a86 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d001      	beq.n	8003a8a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06d      	b.n	8003b66 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_IC_Start+0x9e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a98:	e013      	b.n	8003ac2 <HAL_TIM_IC_Start+0xc6>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_IC_Start+0xae>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa8:	e00b      	b.n	8003ac2 <HAL_TIM_IC_Start+0xc6>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_IC_Start+0xbe>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab8:	e003      	b.n	8003ac2 <HAL_TIM_IC_Start+0xc6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_IC_Start+0xd6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad0:	e013      	b.n	8003afa <HAL_TIM_IC_Start+0xfe>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_IC_Start+0xe6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae0:	e00b      	b.n	8003afa <HAL_TIM_IC_Start+0xfe>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d104      	bne.n	8003af2 <HAL_TIM_IC_Start+0xf6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af0:	e003      	b.n	8003afa <HAL_TIM_IC_Start+0xfe>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fd07 	bl	8004516 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <HAL_TIM_IC_Start+0x174>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_TIM_IC_Start+0x134>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d009      	beq.n	8003b30 <HAL_TIM_IC_Start+0x134>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <HAL_TIM_IC_Start+0x178>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_TIM_IC_Start+0x134>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <HAL_TIM_IC_Start+0x17c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d111      	bne.n	8003b54 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d010      	beq.n	8003b64 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	e007      	b.n	8003b64 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800

08003b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0202 	mvn.w	r2, #2
 8003ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fe f890 	bl	8001ce4 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa85 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fa8b 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0204 	mvn.w	r2, #4
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe f866 	bl	8001ce4 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa5b 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa61 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0208 	mvn.w	r2, #8
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fe f83c 	bl	8001ce4 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa31 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fa37 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0210 	mvn.w	r2, #16
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe f812 	bl	8001ce4 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa07 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa0d 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0201 	mvn.w	r2, #1
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9e2 	bl	80040c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fc81 	bl	800462e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9d1 	bl	80040fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0220 	mvn.w	r2, #32
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fc4c 	bl	800461c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e082      	b.n	8003eac <HAL_TIM_IC_ConfigChannel+0x120>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f000 fa04 	bl	80041d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 020c 	bic.w	r2, r2, #12
 8003dd6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	619a      	str	r2, [r3, #24]
 8003dea:	e05a      	b.n	8003ea2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d11c      	bne.n	8003e2c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6819      	ldr	r1, [r3, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 fa6d 	bl	80042e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6999      	ldr	r1, [r3, #24]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	619a      	str	r2, [r3, #24]
 8003e2a:	e03a      	b.n	8003ea2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d11b      	bne.n	8003e6a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f000 fab8 	bl	80043b6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 020c 	bic.w	r2, r2, #12
 8003e54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	61da      	str	r2, [r3, #28]
 8003e68:	e01b      	b.n	8003ea2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f000 fad7 	bl	800442c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69d9      	ldr	r1, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	021a      	lsls	r2, r3, #8
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIM_ConfigClockSource+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0b3      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x180>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f04:	d03e      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xd0>
 8003f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0a:	f200 8087 	bhi.w	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	f000 8085 	beq.w	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1a:	d87f      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f1c:	2b70      	cmp	r3, #112	; 0x70
 8003f1e:	d01a      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0xa2>
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d87b      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f24:	2b60      	cmp	r3, #96	; 0x60
 8003f26:	d050      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x116>
 8003f28:	2b60      	cmp	r3, #96	; 0x60
 8003f2a:	d877      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f2c:	2b50      	cmp	r3, #80	; 0x50
 8003f2e:	d03c      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xf6>
 8003f30:	2b50      	cmp	r3, #80	; 0x50
 8003f32:	d873      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d058      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x136>
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d86f      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f3c:	2b30      	cmp	r3, #48	; 0x30
 8003f3e:	d064      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x156>
 8003f40:	2b30      	cmp	r3, #48	; 0x30
 8003f42:	d86b      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d060      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x156>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d867      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x168>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x156>
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d05a      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f54:	e062      	b.n	800401c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f000 fab7 	bl	80044d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	609a      	str	r2, [r3, #8]
      break;
 8003f82:	e04e      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f000 faa0 	bl	80044d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa6:	609a      	str	r2, [r3, #8]
      break;
 8003fa8:	e03b      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 f964 	bl	8004284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2150      	movs	r1, #80	; 0x50
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fa6e 	bl	80044a4 <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e02b      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 f9be 	bl	8004358 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2160      	movs	r1, #96	; 0x60
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fa5e 	bl	80044a4 <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e01b      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 f944 	bl	8004284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fa4e 	bl	80044a4 <TIM_ITRx_SetConfig>
      break;
 8004008:	e00b      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f000 fa45 	bl	80044a4 <TIM_ITRx_SetConfig>
        break;
 800401a:	e002      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004020:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b0c      	cmp	r3, #12
 800404e:	d831      	bhi.n	80040b4 <HAL_TIM_ReadCapturedValue+0x78>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800408d 	.word	0x0800408d
 800405c:	080040b5 	.word	0x080040b5
 8004060:	080040b5 	.word	0x080040b5
 8004064:	080040b5 	.word	0x080040b5
 8004068:	08004097 	.word	0x08004097
 800406c:	080040b5 	.word	0x080040b5
 8004070:	080040b5 	.word	0x080040b5
 8004074:	080040b5 	.word	0x080040b5
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040b5 	.word	0x080040b5
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040ab 	.word	0x080040ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	60fb      	str	r3, [r7, #12]

      break;
 8004094:	e00f      	b.n	80040b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	60fb      	str	r3, [r7, #12]

      break;
 800409e:	e00a      	b.n	80040b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	60fb      	str	r3, [r7, #12]

      break;
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	60fb      	str	r3, [r7, #12]

      break;
 80040b2:	e000      	b.n	80040b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80040b4:	bf00      	nop
  }

  return tmpreg;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop

080040c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a25      	ldr	r2, [pc, #148]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800

080041d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0201 	bic.w	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <TIM_TI1_SetConfig+0xa8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_TI1_SetConfig+0x46>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d007      	beq.n	8004216 <TIM_TI1_SetConfig+0x46>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <TIM_TI1_SetConfig+0xac>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_TI1_SetConfig+0x46>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <TIM_TI1_SetConfig+0xb0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <TIM_TI1_SetConfig+0x4a>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <TIM_TI1_SetConfig+0x4c>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	e003      	b.n	800423a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	b2db      	uxtb	r3, r3
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f023 030a 	bic.w	r3, r3, #10
 8004254:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 030a 	and.w	r3, r3, #10
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800

08004284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f023 0201 	bic.w	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f023 030a 	bic.w	r3, r3, #10
 80042c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0210 	bic.w	r2, r3, #16
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800431e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	031b      	lsls	r3, r3, #12
 8004324:	b29b      	uxth	r3, r3
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004332:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	621a      	str	r2, [r3, #32]
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f023 0210 	bic.w	r2, r3, #16
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	031b      	lsls	r3, r3, #12
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004394:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004406:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004458:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800446a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	031b      	lsls	r3, r3, #12
 8004470:	b29b      	uxth	r3, r3
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800447e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	031b      	lsls	r3, r3, #12
 8004484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f043 0307 	orr.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	609a      	str	r2, [r3, #8]
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2201      	movs	r2, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	43db      	mvns	r3, r3
 8004538:	401a      	ands	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1a      	ldr	r2, [r3, #32]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	fa01 f303 	lsl.w	r3, r1, r3
 800454e:	431a      	orrs	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
	...

08004560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e046      	b.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a16      	ldr	r2, [pc, #88]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d009      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a10      	ldr	r2, [pc, #64]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10c      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800

0800461c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000014 	.word	0x20000014

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	2600      	movs	r6, #0
 8004650:	4d0c      	ldr	r5, [pc, #48]	; (8004684 <__libc_init_array+0x38>)
 8004652:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004654:	1b64      	subs	r4, r4, r5
 8004656:	10a4      	asrs	r4, r4, #2
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	f000 ffb2 	bl	80055c4 <_init>
 8004660:	2600      	movs	r6, #0
 8004662:	4d0a      	ldr	r5, [pc, #40]	; (800468c <__libc_init_array+0x40>)
 8004664:	4c0a      	ldr	r4, [pc, #40]	; (8004690 <__libc_init_array+0x44>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	08005650 	.word	0x08005650
 8004688:	08005650 	.word	0x08005650
 800468c:	08005650 	.word	0x08005650
 8004690:	08005654 	.word	0x08005654

08004694 <memset>:
 8004694:	4603      	mov	r3, r0
 8004696:	4402      	add	r2, r0
 8004698:	4293      	cmp	r3, r2
 800469a:	d100      	bne.n	800469e <memset+0xa>
 800469c:	4770      	bx	lr
 800469e:	f803 1b01 	strb.w	r1, [r3], #1
 80046a2:	e7f9      	b.n	8004698 <memset+0x4>

080046a4 <pow>:
 80046a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a8:	461f      	mov	r7, r3
 80046aa:	4680      	mov	r8, r0
 80046ac:	4689      	mov	r9, r1
 80046ae:	4616      	mov	r6, r2
 80046b0:	f000 f8a6 	bl	8004800 <__ieee754_pow>
 80046b4:	4b4d      	ldr	r3, [pc, #308]	; (80047ec <pow+0x148>)
 80046b6:	4604      	mov	r4, r0
 80046b8:	f993 3000 	ldrsb.w	r3, [r3]
 80046bc:	460d      	mov	r5, r1
 80046be:	3301      	adds	r3, #1
 80046c0:	d015      	beq.n	80046ee <pow+0x4a>
 80046c2:	4632      	mov	r2, r6
 80046c4:	463b      	mov	r3, r7
 80046c6:	4630      	mov	r0, r6
 80046c8:	4639      	mov	r1, r7
 80046ca:	f7fc f997 	bl	80009fc <__aeabi_dcmpun>
 80046ce:	b970      	cbnz	r0, 80046ee <pow+0x4a>
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	4640      	mov	r0, r8
 80046d6:	4649      	mov	r1, r9
 80046d8:	f7fc f990 	bl	80009fc <__aeabi_dcmpun>
 80046dc:	2200      	movs	r2, #0
 80046de:	2300      	movs	r3, #0
 80046e0:	b148      	cbz	r0, 80046f6 <pow+0x52>
 80046e2:	4630      	mov	r0, r6
 80046e4:	4639      	mov	r1, r7
 80046e6:	f7fc f957 	bl	8000998 <__aeabi_dcmpeq>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d17b      	bne.n	80047e6 <pow+0x142>
 80046ee:	4620      	mov	r0, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f6:	4640      	mov	r0, r8
 80046f8:	4649      	mov	r1, r9
 80046fa:	f7fc f94d 	bl	8000998 <__aeabi_dcmpeq>
 80046fe:	b1e0      	cbz	r0, 800473a <pow+0x96>
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	4630      	mov	r0, r6
 8004706:	4639      	mov	r1, r7
 8004708:	f7fc f946 	bl	8000998 <__aeabi_dcmpeq>
 800470c:	2800      	cmp	r0, #0
 800470e:	d16a      	bne.n	80047e6 <pow+0x142>
 8004710:	4630      	mov	r0, r6
 8004712:	4639      	mov	r1, r7
 8004714:	f000 fe39 	bl	800538a <finite>
 8004718:	2800      	cmp	r0, #0
 800471a:	d0e8      	beq.n	80046ee <pow+0x4a>
 800471c:	2200      	movs	r2, #0
 800471e:	2300      	movs	r3, #0
 8004720:	4630      	mov	r0, r6
 8004722:	4639      	mov	r1, r7
 8004724:	f7fc f942 	bl	80009ac <__aeabi_dcmplt>
 8004728:	2800      	cmp	r0, #0
 800472a:	d0e0      	beq.n	80046ee <pow+0x4a>
 800472c:	f7ff ff88 	bl	8004640 <__errno>
 8004730:	2321      	movs	r3, #33	; 0x21
 8004732:	2400      	movs	r4, #0
 8004734:	6003      	str	r3, [r0, #0]
 8004736:	4d2e      	ldr	r5, [pc, #184]	; (80047f0 <pow+0x14c>)
 8004738:	e7d9      	b.n	80046ee <pow+0x4a>
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f000 fe24 	bl	800538a <finite>
 8004742:	bba8      	cbnz	r0, 80047b0 <pow+0x10c>
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	f000 fe1f 	bl	800538a <finite>
 800474c:	b380      	cbz	r0, 80047b0 <pow+0x10c>
 800474e:	4630      	mov	r0, r6
 8004750:	4639      	mov	r1, r7
 8004752:	f000 fe1a 	bl	800538a <finite>
 8004756:	b358      	cbz	r0, 80047b0 <pow+0x10c>
 8004758:	4622      	mov	r2, r4
 800475a:	462b      	mov	r3, r5
 800475c:	4620      	mov	r0, r4
 800475e:	4629      	mov	r1, r5
 8004760:	f7fc f94c 	bl	80009fc <__aeabi_dcmpun>
 8004764:	b160      	cbz	r0, 8004780 <pow+0xdc>
 8004766:	f7ff ff6b 	bl	8004640 <__errno>
 800476a:	2321      	movs	r3, #33	; 0x21
 800476c:	2200      	movs	r2, #0
 800476e:	6003      	str	r3, [r0, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	f7fb ffd1 	bl	800071c <__aeabi_ddiv>
 800477a:	4604      	mov	r4, r0
 800477c:	460d      	mov	r5, r1
 800477e:	e7b6      	b.n	80046ee <pow+0x4a>
 8004780:	f7ff ff5e 	bl	8004640 <__errno>
 8004784:	2322      	movs	r3, #34	; 0x22
 8004786:	2200      	movs	r2, #0
 8004788:	6003      	str	r3, [r0, #0]
 800478a:	4649      	mov	r1, r9
 800478c:	2300      	movs	r3, #0
 800478e:	4640      	mov	r0, r8
 8004790:	f7fc f90c 	bl	80009ac <__aeabi_dcmplt>
 8004794:	2400      	movs	r4, #0
 8004796:	b148      	cbz	r0, 80047ac <pow+0x108>
 8004798:	4630      	mov	r0, r6
 800479a:	4639      	mov	r1, r7
 800479c:	f000 fe02 	bl	80053a4 <rint>
 80047a0:	4632      	mov	r2, r6
 80047a2:	463b      	mov	r3, r7
 80047a4:	f7fc f8f8 	bl	8000998 <__aeabi_dcmpeq>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d0c4      	beq.n	8004736 <pow+0x92>
 80047ac:	4d11      	ldr	r5, [pc, #68]	; (80047f4 <pow+0x150>)
 80047ae:	e79e      	b.n	80046ee <pow+0x4a>
 80047b0:	2200      	movs	r2, #0
 80047b2:	2300      	movs	r3, #0
 80047b4:	4620      	mov	r0, r4
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7fc f8ee 	bl	8000998 <__aeabi_dcmpeq>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d096      	beq.n	80046ee <pow+0x4a>
 80047c0:	4640      	mov	r0, r8
 80047c2:	4649      	mov	r1, r9
 80047c4:	f000 fde1 	bl	800538a <finite>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d090      	beq.n	80046ee <pow+0x4a>
 80047cc:	4630      	mov	r0, r6
 80047ce:	4639      	mov	r1, r7
 80047d0:	f000 fddb 	bl	800538a <finite>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d08a      	beq.n	80046ee <pow+0x4a>
 80047d8:	f7ff ff32 	bl	8004640 <__errno>
 80047dc:	2322      	movs	r3, #34	; 0x22
 80047de:	2400      	movs	r4, #0
 80047e0:	2500      	movs	r5, #0
 80047e2:	6003      	str	r3, [r0, #0]
 80047e4:	e783      	b.n	80046ee <pow+0x4a>
 80047e6:	2400      	movs	r4, #0
 80047e8:	4d03      	ldr	r5, [pc, #12]	; (80047f8 <pow+0x154>)
 80047ea:	e780      	b.n	80046ee <pow+0x4a>
 80047ec:	20000078 	.word	0x20000078
 80047f0:	fff00000 	.word	0xfff00000
 80047f4:	7ff00000 	.word	0x7ff00000
 80047f8:	3ff00000 	.word	0x3ff00000
 80047fc:	00000000 	.word	0x00000000

08004800 <__ieee754_pow>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	b093      	sub	sp, #76	; 0x4c
 8004806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800480a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800480e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004812:	ea55 0302 	orrs.w	r3, r5, r2
 8004816:	4607      	mov	r7, r0
 8004818:	4688      	mov	r8, r1
 800481a:	f000 84bf 	beq.w	800519c <__ieee754_pow+0x99c>
 800481e:	4b7e      	ldr	r3, [pc, #504]	; (8004a18 <__ieee754_pow+0x218>)
 8004820:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004824:	429c      	cmp	r4, r3
 8004826:	4689      	mov	r9, r1
 8004828:	4682      	mov	sl, r0
 800482a:	dc09      	bgt.n	8004840 <__ieee754_pow+0x40>
 800482c:	d103      	bne.n	8004836 <__ieee754_pow+0x36>
 800482e:	b978      	cbnz	r0, 8004850 <__ieee754_pow+0x50>
 8004830:	42a5      	cmp	r5, r4
 8004832:	dd02      	ble.n	800483a <__ieee754_pow+0x3a>
 8004834:	e00c      	b.n	8004850 <__ieee754_pow+0x50>
 8004836:	429d      	cmp	r5, r3
 8004838:	dc02      	bgt.n	8004840 <__ieee754_pow+0x40>
 800483a:	429d      	cmp	r5, r3
 800483c:	d10e      	bne.n	800485c <__ieee754_pow+0x5c>
 800483e:	b16a      	cbz	r2, 800485c <__ieee754_pow+0x5c>
 8004840:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004844:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004848:	ea54 030a 	orrs.w	r3, r4, sl
 800484c:	f000 84a6 	beq.w	800519c <__ieee754_pow+0x99c>
 8004850:	4872      	ldr	r0, [pc, #456]	; (8004a1c <__ieee754_pow+0x21c>)
 8004852:	b013      	add	sp, #76	; 0x4c
 8004854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	f000 bd9e 	b.w	8005398 <nan>
 800485c:	f1b9 0f00 	cmp.w	r9, #0
 8004860:	da39      	bge.n	80048d6 <__ieee754_pow+0xd6>
 8004862:	4b6f      	ldr	r3, [pc, #444]	; (8004a20 <__ieee754_pow+0x220>)
 8004864:	429d      	cmp	r5, r3
 8004866:	dc54      	bgt.n	8004912 <__ieee754_pow+0x112>
 8004868:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800486c:	429d      	cmp	r5, r3
 800486e:	f340 84a6 	ble.w	80051be <__ieee754_pow+0x9be>
 8004872:	152b      	asrs	r3, r5, #20
 8004874:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004878:	2b14      	cmp	r3, #20
 800487a:	dd0f      	ble.n	800489c <__ieee754_pow+0x9c>
 800487c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004880:	fa22 f103 	lsr.w	r1, r2, r3
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	4293      	cmp	r3, r2
 800488a:	f040 8498 	bne.w	80051be <__ieee754_pow+0x9be>
 800488e:	f001 0101 	and.w	r1, r1, #1
 8004892:	f1c1 0302 	rsb	r3, r1, #2
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	b182      	cbz	r2, 80048bc <__ieee754_pow+0xbc>
 800489a:	e05e      	b.n	800495a <__ieee754_pow+0x15a>
 800489c:	2a00      	cmp	r2, #0
 800489e:	d15a      	bne.n	8004956 <__ieee754_pow+0x156>
 80048a0:	f1c3 0314 	rsb	r3, r3, #20
 80048a4:	fa45 f103 	asr.w	r1, r5, r3
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	42ab      	cmp	r3, r5
 80048ae:	f040 8483 	bne.w	80051b8 <__ieee754_pow+0x9b8>
 80048b2:	f001 0101 	and.w	r1, r1, #1
 80048b6:	f1c1 0302 	rsb	r3, r1, #2
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <__ieee754_pow+0x224>)
 80048be:	429d      	cmp	r5, r3
 80048c0:	d130      	bne.n	8004924 <__ieee754_pow+0x124>
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	f280 8474 	bge.w	80051b0 <__ieee754_pow+0x9b0>
 80048c8:	463a      	mov	r2, r7
 80048ca:	4643      	mov	r3, r8
 80048cc:	2000      	movs	r0, #0
 80048ce:	4955      	ldr	r1, [pc, #340]	; (8004a24 <__ieee754_pow+0x224>)
 80048d0:	f7fb ff24 	bl	800071c <__aeabi_ddiv>
 80048d4:	e02f      	b.n	8004936 <__ieee754_pow+0x136>
 80048d6:	2300      	movs	r3, #0
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2a00      	cmp	r2, #0
 80048dc:	d13d      	bne.n	800495a <__ieee754_pow+0x15a>
 80048de:	4b4e      	ldr	r3, [pc, #312]	; (8004a18 <__ieee754_pow+0x218>)
 80048e0:	429d      	cmp	r5, r3
 80048e2:	d1eb      	bne.n	80048bc <__ieee754_pow+0xbc>
 80048e4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80048e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80048ec:	ea53 030a 	orrs.w	r3, r3, sl
 80048f0:	f000 8454 	beq.w	800519c <__ieee754_pow+0x99c>
 80048f4:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <__ieee754_pow+0x228>)
 80048f6:	429c      	cmp	r4, r3
 80048f8:	dd0d      	ble.n	8004916 <__ieee754_pow+0x116>
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	f280 8454 	bge.w	80051a8 <__ieee754_pow+0x9a8>
 8004900:	f04f 0b00 	mov.w	fp, #0
 8004904:	f04f 0c00 	mov.w	ip, #0
 8004908:	4658      	mov	r0, fp
 800490a:	4661      	mov	r1, ip
 800490c:	b013      	add	sp, #76	; 0x4c
 800490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004912:	2302      	movs	r3, #2
 8004914:	e7e0      	b.n	80048d8 <__ieee754_pow+0xd8>
 8004916:	2e00      	cmp	r6, #0
 8004918:	daf2      	bge.n	8004900 <__ieee754_pow+0x100>
 800491a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800491e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004922:	e7f1      	b.n	8004908 <__ieee754_pow+0x108>
 8004924:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8004928:	d108      	bne.n	800493c <__ieee754_pow+0x13c>
 800492a:	463a      	mov	r2, r7
 800492c:	4643      	mov	r3, r8
 800492e:	4638      	mov	r0, r7
 8004930:	4641      	mov	r1, r8
 8004932:	f7fb fdc9 	bl	80004c8 <__aeabi_dmul>
 8004936:	4683      	mov	fp, r0
 8004938:	468c      	mov	ip, r1
 800493a:	e7e5      	b.n	8004908 <__ieee754_pow+0x108>
 800493c:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <__ieee754_pow+0x22c>)
 800493e:	429e      	cmp	r6, r3
 8004940:	d10b      	bne.n	800495a <__ieee754_pow+0x15a>
 8004942:	f1b9 0f00 	cmp.w	r9, #0
 8004946:	db08      	blt.n	800495a <__ieee754_pow+0x15a>
 8004948:	4638      	mov	r0, r7
 800494a:	4641      	mov	r1, r8
 800494c:	b013      	add	sp, #76	; 0x4c
 800494e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004952:	f000 bc6b 	b.w	800522c <__ieee754_sqrt>
 8004956:	2300      	movs	r3, #0
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	4638      	mov	r0, r7
 800495c:	4641      	mov	r1, r8
 800495e:	f000 fd11 	bl	8005384 <fabs>
 8004962:	4683      	mov	fp, r0
 8004964:	468c      	mov	ip, r1
 8004966:	f1ba 0f00 	cmp.w	sl, #0
 800496a:	d129      	bne.n	80049c0 <__ieee754_pow+0x1c0>
 800496c:	b124      	cbz	r4, 8004978 <__ieee754_pow+0x178>
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <__ieee754_pow+0x224>)
 8004970:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8004974:	429a      	cmp	r2, r3
 8004976:	d123      	bne.n	80049c0 <__ieee754_pow+0x1c0>
 8004978:	2e00      	cmp	r6, #0
 800497a:	da07      	bge.n	800498c <__ieee754_pow+0x18c>
 800497c:	465a      	mov	r2, fp
 800497e:	4663      	mov	r3, ip
 8004980:	2000      	movs	r0, #0
 8004982:	4928      	ldr	r1, [pc, #160]	; (8004a24 <__ieee754_pow+0x224>)
 8004984:	f7fb feca 	bl	800071c <__aeabi_ddiv>
 8004988:	4683      	mov	fp, r0
 800498a:	468c      	mov	ip, r1
 800498c:	f1b9 0f00 	cmp.w	r9, #0
 8004990:	daba      	bge.n	8004908 <__ieee754_pow+0x108>
 8004992:	9b00      	ldr	r3, [sp, #0]
 8004994:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004998:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800499c:	4323      	orrs	r3, r4
 800499e:	d108      	bne.n	80049b2 <__ieee754_pow+0x1b2>
 80049a0:	465a      	mov	r2, fp
 80049a2:	4663      	mov	r3, ip
 80049a4:	4658      	mov	r0, fp
 80049a6:	4661      	mov	r1, ip
 80049a8:	f7fb fbd6 	bl	8000158 <__aeabi_dsub>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	e78e      	b.n	80048d0 <__ieee754_pow+0xd0>
 80049b2:	9b00      	ldr	r3, [sp, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d1a7      	bne.n	8004908 <__ieee754_pow+0x108>
 80049b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80049bc:	469c      	mov	ip, r3
 80049be:	e7a3      	b.n	8004908 <__ieee754_pow+0x108>
 80049c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80049c4:	3b01      	subs	r3, #1
 80049c6:	930c      	str	r3, [sp, #48]	; 0x30
 80049c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049ca:	9b00      	ldr	r3, [sp, #0]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	d104      	bne.n	80049da <__ieee754_pow+0x1da>
 80049d0:	463a      	mov	r2, r7
 80049d2:	4643      	mov	r3, r8
 80049d4:	4638      	mov	r0, r7
 80049d6:	4641      	mov	r1, r8
 80049d8:	e7e6      	b.n	80049a8 <__ieee754_pow+0x1a8>
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <__ieee754_pow+0x230>)
 80049dc:	429d      	cmp	r5, r3
 80049de:	f340 80f9 	ble.w	8004bd4 <__ieee754_pow+0x3d4>
 80049e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80049e6:	429d      	cmp	r5, r3
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <__ieee754_pow+0x228>)
 80049ea:	dd09      	ble.n	8004a00 <__ieee754_pow+0x200>
 80049ec:	429c      	cmp	r4, r3
 80049ee:	dc0c      	bgt.n	8004a0a <__ieee754_pow+0x20a>
 80049f0:	2e00      	cmp	r6, #0
 80049f2:	da85      	bge.n	8004900 <__ieee754_pow+0x100>
 80049f4:	a306      	add	r3, pc, #24	; (adr r3, 8004a10 <__ieee754_pow+0x210>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	e798      	b.n	8004932 <__ieee754_pow+0x132>
 8004a00:	429c      	cmp	r4, r3
 8004a02:	dbf5      	blt.n	80049f0 <__ieee754_pow+0x1f0>
 8004a04:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <__ieee754_pow+0x224>)
 8004a06:	429c      	cmp	r4, r3
 8004a08:	dd14      	ble.n	8004a34 <__ieee754_pow+0x234>
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	dcf2      	bgt.n	80049f4 <__ieee754_pow+0x1f4>
 8004a0e:	e777      	b.n	8004900 <__ieee754_pow+0x100>
 8004a10:	8800759c 	.word	0x8800759c
 8004a14:	7e37e43c 	.word	0x7e37e43c
 8004a18:	7ff00000 	.word	0x7ff00000
 8004a1c:	08005608 	.word	0x08005608
 8004a20:	433fffff 	.word	0x433fffff
 8004a24:	3ff00000 	.word	0x3ff00000
 8004a28:	3fefffff 	.word	0x3fefffff
 8004a2c:	3fe00000 	.word	0x3fe00000
 8004a30:	41e00000 	.word	0x41e00000
 8004a34:	4661      	mov	r1, ip
 8004a36:	2200      	movs	r2, #0
 8004a38:	4658      	mov	r0, fp
 8004a3a:	4b61      	ldr	r3, [pc, #388]	; (8004bc0 <__ieee754_pow+0x3c0>)
 8004a3c:	f7fb fb8c 	bl	8000158 <__aeabi_dsub>
 8004a40:	a355      	add	r3, pc, #340	; (adr r3, 8004b98 <__ieee754_pow+0x398>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	4604      	mov	r4, r0
 8004a48:	460d      	mov	r5, r1
 8004a4a:	f7fb fd3d 	bl	80004c8 <__aeabi_dmul>
 8004a4e:	a354      	add	r3, pc, #336	; (adr r3, 8004ba0 <__ieee754_pow+0x3a0>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	4606      	mov	r6, r0
 8004a56:	460f      	mov	r7, r1
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fd34 	bl	80004c8 <__aeabi_dmul>
 8004a60:	2200      	movs	r2, #0
 8004a62:	4682      	mov	sl, r0
 8004a64:	468b      	mov	fp, r1
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <__ieee754_pow+0x3c4>)
 8004a6c:	f7fb fd2c 	bl	80004c8 <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	a14c      	add	r1, pc, #304	; (adr r1, 8004ba8 <__ieee754_pow+0x3a8>)
 8004a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7a:	f7fb fb6d 	bl	8000158 <__aeabi_dsub>
 8004a7e:	4622      	mov	r2, r4
 8004a80:	462b      	mov	r3, r5
 8004a82:	f7fb fd21 	bl	80004c8 <__aeabi_dmul>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	494e      	ldr	r1, [pc, #312]	; (8004bc8 <__ieee754_pow+0x3c8>)
 8004a8e:	f7fb fb63 	bl	8000158 <__aeabi_dsub>
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	4680      	mov	r8, r0
 8004a98:	4689      	mov	r9, r1
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	f7fb fd13 	bl	80004c8 <__aeabi_dmul>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	f7fb fd0d 	bl	80004c8 <__aeabi_dmul>
 8004aae:	a340      	add	r3, pc, #256	; (adr r3, 8004bb0 <__ieee754_pow+0x3b0>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fd08 	bl	80004c8 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4650      	mov	r0, sl
 8004abe:	4659      	mov	r1, fp
 8004ac0:	f7fb fb4a 	bl	8000158 <__aeabi_dsub>
 8004ac4:	f04f 0a00 	mov.w	sl, #0
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4604      	mov	r4, r0
 8004ace:	460d      	mov	r5, r1
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	f7fb fb42 	bl	800015c <__adddf3>
 8004ad8:	4632      	mov	r2, r6
 8004ada:	463b      	mov	r3, r7
 8004adc:	4650      	mov	r0, sl
 8004ade:	468b      	mov	fp, r1
 8004ae0:	f7fb fb3a 	bl	8000158 <__aeabi_dsub>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4620      	mov	r0, r4
 8004aea:	4629      	mov	r1, r5
 8004aec:	f7fb fb34 	bl	8000158 <__aeabi_dsub>
 8004af0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004af4:	9b00      	ldr	r3, [sp, #0]
 8004af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004af8:	3b01      	subs	r3, #1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f04f 0600 	mov.w	r6, #0
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	bf0c      	ite	eq
 8004b06:	4b31      	ldreq	r3, [pc, #196]	; (8004bcc <__ieee754_pow+0x3cc>)
 8004b08:	4b2d      	ldrne	r3, [pc, #180]	; (8004bc0 <__ieee754_pow+0x3c0>)
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	460d      	mov	r5, r1
 8004b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b12:	e9cd 2300 	strd	r2, r3, [sp]
 8004b16:	4632      	mov	r2, r6
 8004b18:	463b      	mov	r3, r7
 8004b1a:	f7fb fb1d 	bl	8000158 <__aeabi_dsub>
 8004b1e:	4652      	mov	r2, sl
 8004b20:	465b      	mov	r3, fp
 8004b22:	f7fb fcd1 	bl	80004c8 <__aeabi_dmul>
 8004b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b2a:	4680      	mov	r8, r0
 8004b2c:	4689      	mov	r9, r1
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	f7fb fcc9 	bl	80004c8 <__aeabi_dmul>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	f7fb fb0d 	bl	800015c <__adddf3>
 8004b42:	4632      	mov	r2, r6
 8004b44:	463b      	mov	r3, r7
 8004b46:	4680      	mov	r8, r0
 8004b48:	4689      	mov	r9, r1
 8004b4a:	4650      	mov	r0, sl
 8004b4c:	4659      	mov	r1, fp
 8004b4e:	f7fb fcbb 	bl	80004c8 <__aeabi_dmul>
 8004b52:	4604      	mov	r4, r0
 8004b54:	460d      	mov	r5, r1
 8004b56:	460b      	mov	r3, r1
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b62:	f7fb fafb 	bl	800015c <__adddf3>
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <__ieee754_pow+0x3d0>)
 8004b68:	4682      	mov	sl, r0
 8004b6a:	4299      	cmp	r1, r3
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	460e      	mov	r6, r1
 8004b70:	f340 82ed 	ble.w	800514e <__ieee754_pow+0x94e>
 8004b74:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004b78:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004b7c:	4303      	orrs	r3, r0
 8004b7e:	f000 81e7 	beq.w	8004f50 <__ieee754_pow+0x750>
 8004b82:	a30d      	add	r3, pc, #52	; (adr r3, 8004bb8 <__ieee754_pow+0x3b8>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b8c:	f7fb fc9c 	bl	80004c8 <__aeabi_dmul>
 8004b90:	a309      	add	r3, pc, #36	; (adr r3, 8004bb8 <__ieee754_pow+0x3b8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	e6cc      	b.n	8004932 <__ieee754_pow+0x132>
 8004b98:	60000000 	.word	0x60000000
 8004b9c:	3ff71547 	.word	0x3ff71547
 8004ba0:	f85ddf44 	.word	0xf85ddf44
 8004ba4:	3e54ae0b 	.word	0x3e54ae0b
 8004ba8:	55555555 	.word	0x55555555
 8004bac:	3fd55555 	.word	0x3fd55555
 8004bb0:	652b82fe 	.word	0x652b82fe
 8004bb4:	3ff71547 	.word	0x3ff71547
 8004bb8:	8800759c 	.word	0x8800759c
 8004bbc:	7e37e43c 	.word	0x7e37e43c
 8004bc0:	3ff00000 	.word	0x3ff00000
 8004bc4:	3fd00000 	.word	0x3fd00000
 8004bc8:	3fe00000 	.word	0x3fe00000
 8004bcc:	bff00000 	.word	0xbff00000
 8004bd0:	408fffff 	.word	0x408fffff
 8004bd4:	4bd4      	ldr	r3, [pc, #848]	; (8004f28 <__ieee754_pow+0x728>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	ea09 0303 	and.w	r3, r9, r3
 8004bdc:	b943      	cbnz	r3, 8004bf0 <__ieee754_pow+0x3f0>
 8004bde:	4658      	mov	r0, fp
 8004be0:	4661      	mov	r1, ip
 8004be2:	4bd2      	ldr	r3, [pc, #840]	; (8004f2c <__ieee754_pow+0x72c>)
 8004be4:	f7fb fc70 	bl	80004c8 <__aeabi_dmul>
 8004be8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004bec:	4683      	mov	fp, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	1523      	asrs	r3, r4, #20
 8004bf2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004bf6:	4413      	add	r3, r2
 8004bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bfa:	4bcd      	ldr	r3, [pc, #820]	; (8004f30 <__ieee754_pow+0x730>)
 8004bfc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004c00:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004c04:	429c      	cmp	r4, r3
 8004c06:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004c0a:	dd08      	ble.n	8004c1e <__ieee754_pow+0x41e>
 8004c0c:	4bc9      	ldr	r3, [pc, #804]	; (8004f34 <__ieee754_pow+0x734>)
 8004c0e:	429c      	cmp	r4, r3
 8004c10:	f340 819c 	ble.w	8004f4c <__ieee754_pow+0x74c>
 8004c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c1e:	2600      	movs	r6, #0
 8004c20:	00f3      	lsls	r3, r6, #3
 8004c22:	930d      	str	r3, [sp, #52]	; 0x34
 8004c24:	4bc4      	ldr	r3, [pc, #784]	; (8004f38 <__ieee754_pow+0x738>)
 8004c26:	4658      	mov	r0, fp
 8004c28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c30:	4629      	mov	r1, r5
 8004c32:	461a      	mov	r2, r3
 8004c34:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004c38:	4623      	mov	r3, r4
 8004c3a:	f7fb fa8d 	bl	8000158 <__aeabi_dsub>
 8004c3e:	46da      	mov	sl, fp
 8004c40:	462b      	mov	r3, r5
 8004c42:	4652      	mov	r2, sl
 8004c44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004c48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c4c:	f7fb fa86 	bl	800015c <__adddf3>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	2000      	movs	r0, #0
 8004c56:	49b9      	ldr	r1, [pc, #740]	; (8004f3c <__ieee754_pow+0x73c>)
 8004c58:	f7fb fd60 	bl	800071c <__aeabi_ddiv>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c68:	f7fb fc2e 	bl	80004c8 <__aeabi_dmul>
 8004c6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c70:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004c74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	46ab      	mov	fp, r5
 8004c7e:	106d      	asrs	r5, r5, #1
 8004c80:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004c84:	9304      	str	r3, [sp, #16]
 8004c86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004c8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004c8e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004c92:	4640      	mov	r0, r8
 8004c94:	4649      	mov	r1, r9
 8004c96:	4614      	mov	r4, r2
 8004c98:	461d      	mov	r5, r3
 8004c9a:	f7fb fc15 	bl	80004c8 <__aeabi_dmul>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ca6:	f7fb fa57 	bl	8000158 <__aeabi_dsub>
 8004caa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460f      	mov	r7, r1
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fa4f 	bl	8000158 <__aeabi_dsub>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	f7fb fa49 	bl	8000158 <__aeabi_dsub>
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	464b      	mov	r3, r9
 8004cca:	f7fb fbfd 	bl	80004c8 <__aeabi_dmul>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	f7fb fa3f 	bl	8000158 <__aeabi_dsub>
 8004cda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cde:	f7fb fbf3 	bl	80004c8 <__aeabi_dmul>
 8004ce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ce6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004cea:	4610      	mov	r0, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	f7fb fbeb 	bl	80004c8 <__aeabi_dmul>
 8004cf2:	a37b      	add	r3, pc, #492	; (adr r3, 8004ee0 <__ieee754_pow+0x6e0>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	460d      	mov	r5, r1
 8004cfc:	f7fb fbe4 	bl	80004c8 <__aeabi_dmul>
 8004d00:	a379      	add	r3, pc, #484	; (adr r3, 8004ee8 <__ieee754_pow+0x6e8>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fa29 	bl	800015c <__adddf3>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	f7fb fbdb 	bl	80004c8 <__aeabi_dmul>
 8004d12:	a377      	add	r3, pc, #476	; (adr r3, 8004ef0 <__ieee754_pow+0x6f0>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fa20 	bl	800015c <__adddf3>
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	462b      	mov	r3, r5
 8004d20:	f7fb fbd2 	bl	80004c8 <__aeabi_dmul>
 8004d24:	a374      	add	r3, pc, #464	; (adr r3, 8004ef8 <__ieee754_pow+0x6f8>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fa17 	bl	800015c <__adddf3>
 8004d2e:	4622      	mov	r2, r4
 8004d30:	462b      	mov	r3, r5
 8004d32:	f7fb fbc9 	bl	80004c8 <__aeabi_dmul>
 8004d36:	a372      	add	r3, pc, #456	; (adr r3, 8004f00 <__ieee754_pow+0x700>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f7fb fa0e 	bl	800015c <__adddf3>
 8004d40:	4622      	mov	r2, r4
 8004d42:	462b      	mov	r3, r5
 8004d44:	f7fb fbc0 	bl	80004c8 <__aeabi_dmul>
 8004d48:	a36f      	add	r3, pc, #444	; (adr r3, 8004f08 <__ieee754_pow+0x708>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb fa05 	bl	800015c <__adddf3>
 8004d52:	4622      	mov	r2, r4
 8004d54:	4606      	mov	r6, r0
 8004d56:	460f      	mov	r7, r1
 8004d58:	462b      	mov	r3, r5
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	f7fb fbb3 	bl	80004c8 <__aeabi_dmul>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4630      	mov	r0, r6
 8004d68:	4639      	mov	r1, r7
 8004d6a:	f7fb fbad 	bl	80004c8 <__aeabi_dmul>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460d      	mov	r5, r1
 8004d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d76:	4642      	mov	r2, r8
 8004d78:	464b      	mov	r3, r9
 8004d7a:	f7fb f9ef 	bl	800015c <__adddf3>
 8004d7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d82:	f7fb fba1 	bl	80004c8 <__aeabi_dmul>
 8004d86:	4622      	mov	r2, r4
 8004d88:	462b      	mov	r3, r5
 8004d8a:	f7fb f9e7 	bl	800015c <__adddf3>
 8004d8e:	4642      	mov	r2, r8
 8004d90:	4606      	mov	r6, r0
 8004d92:	460f      	mov	r7, r1
 8004d94:	464b      	mov	r3, r9
 8004d96:	4640      	mov	r0, r8
 8004d98:	4649      	mov	r1, r9
 8004d9a:	f7fb fb95 	bl	80004c8 <__aeabi_dmul>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <__ieee754_pow+0x740>)
 8004da2:	4682      	mov	sl, r0
 8004da4:	468b      	mov	fp, r1
 8004da6:	f7fb f9d9 	bl	800015c <__adddf3>
 8004daa:	4632      	mov	r2, r6
 8004dac:	463b      	mov	r3, r7
 8004dae:	f7fb f9d5 	bl	800015c <__adddf3>
 8004db2:	9c04      	ldr	r4, [sp, #16]
 8004db4:	460d      	mov	r5, r1
 8004db6:	4622      	mov	r2, r4
 8004db8:	460b      	mov	r3, r1
 8004dba:	4640      	mov	r0, r8
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	f7fb fb83 	bl	80004c8 <__aeabi_dmul>
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	4689      	mov	r9, r1
 8004dc8:	4620      	mov	r0, r4
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4b5c      	ldr	r3, [pc, #368]	; (8004f40 <__ieee754_pow+0x740>)
 8004dce:	f7fb f9c3 	bl	8000158 <__aeabi_dsub>
 8004dd2:	4652      	mov	r2, sl
 8004dd4:	465b      	mov	r3, fp
 8004dd6:	f7fb f9bf 	bl	8000158 <__aeabi_dsub>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4630      	mov	r0, r6
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb f9b9 	bl	8000158 <__aeabi_dsub>
 8004de6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dea:	f7fb fb6d 	bl	80004c8 <__aeabi_dmul>
 8004dee:	4622      	mov	r2, r4
 8004df0:	4606      	mov	r6, r0
 8004df2:	460f      	mov	r7, r1
 8004df4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004df8:	462b      	mov	r3, r5
 8004dfa:	f7fb fb65 	bl	80004c8 <__aeabi_dmul>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4630      	mov	r0, r6
 8004e04:	4639      	mov	r1, r7
 8004e06:	f7fb f9a9 	bl	800015c <__adddf3>
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	460f      	mov	r7, r1
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4640      	mov	r0, r8
 8004e14:	4649      	mov	r1, r9
 8004e16:	f7fb f9a1 	bl	800015c <__adddf3>
 8004e1a:	a33d      	add	r3, pc, #244	; (adr r3, 8004f10 <__ieee754_pow+0x710>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	9c04      	ldr	r4, [sp, #16]
 8004e22:	460d      	mov	r5, r1
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7fb fb4f 	bl	80004c8 <__aeabi_dmul>
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb f98f 	bl	8000158 <__aeabi_dsub>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4630      	mov	r0, r6
 8004e40:	4639      	mov	r1, r7
 8004e42:	f7fb f989 	bl	8000158 <__aeabi_dsub>
 8004e46:	a334      	add	r3, pc, #208	; (adr r3, 8004f18 <__ieee754_pow+0x718>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb fb3c 	bl	80004c8 <__aeabi_dmul>
 8004e50:	a333      	add	r3, pc, #204	; (adr r3, 8004f20 <__ieee754_pow+0x720>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	4606      	mov	r6, r0
 8004e58:	460f      	mov	r7, r1
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f7fb fb33 	bl	80004c8 <__aeabi_dmul>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4630      	mov	r0, r6
 8004e68:	4639      	mov	r1, r7
 8004e6a:	f7fb f977 	bl	800015c <__adddf3>
 8004e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e70:	4b34      	ldr	r3, [pc, #208]	; (8004f44 <__ieee754_pow+0x744>)
 8004e72:	4413      	add	r3, r2
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f7fb f970 	bl	800015c <__adddf3>
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e80:	4689      	mov	r9, r1
 8004e82:	f7fb fab7 	bl	80003f4 <__aeabi_i2d>
 8004e86:	4604      	mov	r4, r0
 8004e88:	460d      	mov	r5, r1
 8004e8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <__ieee754_pow+0x748>)
 8004e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e92:	4413      	add	r3, r2
 8004e94:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	f7fb f95e 	bl	800015c <__adddf3>
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	f7fb f95a 	bl	800015c <__adddf3>
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	462b      	mov	r3, r5
 8004eac:	f7fb f956 	bl	800015c <__adddf3>
 8004eb0:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	4650      	mov	r0, sl
 8004eba:	468b      	mov	fp, r1
 8004ebc:	f7fb f94c 	bl	8000158 <__aeabi_dsub>
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	f7fb f948 	bl	8000158 <__aeabi_dsub>
 8004ec8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ecc:	f7fb f944 	bl	8000158 <__aeabi_dsub>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	e608      	b.n	8004aec <__ieee754_pow+0x2ec>
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w
 8004ee0:	4a454eef 	.word	0x4a454eef
 8004ee4:	3fca7e28 	.word	0x3fca7e28
 8004ee8:	93c9db65 	.word	0x93c9db65
 8004eec:	3fcd864a 	.word	0x3fcd864a
 8004ef0:	a91d4101 	.word	0xa91d4101
 8004ef4:	3fd17460 	.word	0x3fd17460
 8004ef8:	518f264d 	.word	0x518f264d
 8004efc:	3fd55555 	.word	0x3fd55555
 8004f00:	db6fabff 	.word	0xdb6fabff
 8004f04:	3fdb6db6 	.word	0x3fdb6db6
 8004f08:	33333303 	.word	0x33333303
 8004f0c:	3fe33333 	.word	0x3fe33333
 8004f10:	e0000000 	.word	0xe0000000
 8004f14:	3feec709 	.word	0x3feec709
 8004f18:	dc3a03fd 	.word	0xdc3a03fd
 8004f1c:	3feec709 	.word	0x3feec709
 8004f20:	145b01f5 	.word	0x145b01f5
 8004f24:	be3e2fe0 	.word	0xbe3e2fe0
 8004f28:	7ff00000 	.word	0x7ff00000
 8004f2c:	43400000 	.word	0x43400000
 8004f30:	0003988e 	.word	0x0003988e
 8004f34:	000bb679 	.word	0x000bb679
 8004f38:	08005610 	.word	0x08005610
 8004f3c:	3ff00000 	.word	0x3ff00000
 8004f40:	40080000 	.word	0x40080000
 8004f44:	08005630 	.word	0x08005630
 8004f48:	08005620 	.word	0x08005620
 8004f4c:	2601      	movs	r6, #1
 8004f4e:	e667      	b.n	8004c20 <__ieee754_pow+0x420>
 8004f50:	a39d      	add	r3, pc, #628	; (adr r3, 80051c8 <__ieee754_pow+0x9c8>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb f8ff 	bl	800015c <__adddf3>
 8004f5e:	4622      	mov	r2, r4
 8004f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f64:	462b      	mov	r3, r5
 8004f66:	4650      	mov	r0, sl
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f8f5 	bl	8000158 <__aeabi_dsub>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f76:	f7fb fd37 	bl	80009e8 <__aeabi_dcmpgt>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f47f ae01 	bne.w	8004b82 <__ieee754_pow+0x382>
 8004f80:	4aa5      	ldr	r2, [pc, #660]	; (8005218 <__ieee754_pow+0xa18>)
 8004f82:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f340 8103 	ble.w	8005192 <__ieee754_pow+0x992>
 8004f8c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004f90:	2000      	movs	r0, #0
 8004f92:	151b      	asrs	r3, r3, #20
 8004f94:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004f98:	fa4a f303 	asr.w	r3, sl, r3
 8004f9c:	4433      	add	r3, r6
 8004f9e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004fa2:	4f9e      	ldr	r7, [pc, #632]	; (800521c <__ieee754_pow+0xa1c>)
 8004fa4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004fa8:	4117      	asrs	r7, r2
 8004faa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004fae:	ea23 0107 	bic.w	r1, r3, r7
 8004fb2:	f1c2 0214 	rsb	r2, r2, #20
 8004fb6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004fba:	460b      	mov	r3, r1
 8004fbc:	fa4a fa02 	asr.w	sl, sl, r2
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	bfb8      	it	lt
 8004fca:	f1ca 0a00 	rsblt	sl, sl, #0
 8004fce:	f7fb f8c3 	bl	8000158 <__aeabi_dsub>
 8004fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fda:	2400      	movs	r4, #0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	f7fb f8bc 	bl	800015c <__adddf3>
 8004fe4:	a37a      	add	r3, pc, #488	; (adr r3, 80051d0 <__ieee754_pow+0x9d0>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	4620      	mov	r0, r4
 8004fec:	460d      	mov	r5, r1
 8004fee:	f7fb fa6b 	bl	80004c8 <__aeabi_dmul>
 8004ff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	460f      	mov	r7, r1
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7fb f8ab 	bl	8000158 <__aeabi_dsub>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb f8a5 	bl	8000158 <__aeabi_dsub>
 800500e:	a372      	add	r3, pc, #456	; (adr r3, 80051d8 <__ieee754_pow+0x9d8>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb fa58 	bl	80004c8 <__aeabi_dmul>
 8005018:	a371      	add	r3, pc, #452	; (adr r3, 80051e0 <__ieee754_pow+0x9e0>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	4680      	mov	r8, r0
 8005020:	4689      	mov	r9, r1
 8005022:	4620      	mov	r0, r4
 8005024:	4629      	mov	r1, r5
 8005026:	f7fb fa4f 	bl	80004c8 <__aeabi_dmul>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4640      	mov	r0, r8
 8005030:	4649      	mov	r1, r9
 8005032:	f7fb f893 	bl	800015c <__adddf3>
 8005036:	4604      	mov	r4, r0
 8005038:	460d      	mov	r5, r1
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4630      	mov	r0, r6
 8005040:	4639      	mov	r1, r7
 8005042:	f7fb f88b 	bl	800015c <__adddf3>
 8005046:	4632      	mov	r2, r6
 8005048:	463b      	mov	r3, r7
 800504a:	4680      	mov	r8, r0
 800504c:	4689      	mov	r9, r1
 800504e:	f7fb f883 	bl	8000158 <__aeabi_dsub>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4620      	mov	r0, r4
 8005058:	4629      	mov	r1, r5
 800505a:	f7fb f87d 	bl	8000158 <__aeabi_dsub>
 800505e:	4642      	mov	r2, r8
 8005060:	4606      	mov	r6, r0
 8005062:	460f      	mov	r7, r1
 8005064:	464b      	mov	r3, r9
 8005066:	4640      	mov	r0, r8
 8005068:	4649      	mov	r1, r9
 800506a:	f7fb fa2d 	bl	80004c8 <__aeabi_dmul>
 800506e:	a35e      	add	r3, pc, #376	; (adr r3, 80051e8 <__ieee754_pow+0x9e8>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	4604      	mov	r4, r0
 8005076:	460d      	mov	r5, r1
 8005078:	f7fb fa26 	bl	80004c8 <__aeabi_dmul>
 800507c:	a35c      	add	r3, pc, #368	; (adr r3, 80051f0 <__ieee754_pow+0x9f0>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb f869 	bl	8000158 <__aeabi_dsub>
 8005086:	4622      	mov	r2, r4
 8005088:	462b      	mov	r3, r5
 800508a:	f7fb fa1d 	bl	80004c8 <__aeabi_dmul>
 800508e:	a35a      	add	r3, pc, #360	; (adr r3, 80051f8 <__ieee754_pow+0x9f8>)
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f7fb f862 	bl	800015c <__adddf3>
 8005098:	4622      	mov	r2, r4
 800509a:	462b      	mov	r3, r5
 800509c:	f7fb fa14 	bl	80004c8 <__aeabi_dmul>
 80050a0:	a357      	add	r3, pc, #348	; (adr r3, 8005200 <__ieee754_pow+0xa00>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb f857 	bl	8000158 <__aeabi_dsub>
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	f7fb fa0b 	bl	80004c8 <__aeabi_dmul>
 80050b2:	a355      	add	r3, pc, #340	; (adr r3, 8005208 <__ieee754_pow+0xa08>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f7fb f850 	bl	800015c <__adddf3>
 80050bc:	4622      	mov	r2, r4
 80050be:	462b      	mov	r3, r5
 80050c0:	f7fb fa02 	bl	80004c8 <__aeabi_dmul>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4640      	mov	r0, r8
 80050ca:	4649      	mov	r1, r9
 80050cc:	f7fb f844 	bl	8000158 <__aeabi_dsub>
 80050d0:	4604      	mov	r4, r0
 80050d2:	460d      	mov	r5, r1
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4640      	mov	r0, r8
 80050da:	4649      	mov	r1, r9
 80050dc:	f7fb f9f4 	bl	80004c8 <__aeabi_dmul>
 80050e0:	2200      	movs	r2, #0
 80050e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	f7fb f833 	bl	8000158 <__aeabi_dsub>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050fa:	f7fb fb0f 	bl	800071c <__aeabi_ddiv>
 80050fe:	4632      	mov	r2, r6
 8005100:	4604      	mov	r4, r0
 8005102:	460d      	mov	r5, r1
 8005104:	463b      	mov	r3, r7
 8005106:	4640      	mov	r0, r8
 8005108:	4649      	mov	r1, r9
 800510a:	f7fb f9dd 	bl	80004c8 <__aeabi_dmul>
 800510e:	4632      	mov	r2, r6
 8005110:	463b      	mov	r3, r7
 8005112:	f7fb f823 	bl	800015c <__adddf3>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4620      	mov	r0, r4
 800511c:	4629      	mov	r1, r5
 800511e:	f7fb f81b 	bl	8000158 <__aeabi_dsub>
 8005122:	4642      	mov	r2, r8
 8005124:	464b      	mov	r3, r9
 8005126:	f7fb f817 	bl	8000158 <__aeabi_dsub>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	2000      	movs	r0, #0
 8005130:	493b      	ldr	r1, [pc, #236]	; (8005220 <__ieee754_pow+0xa20>)
 8005132:	f7fb f811 	bl	8000158 <__aeabi_dsub>
 8005136:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800513a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800513e:	da2b      	bge.n	8005198 <__ieee754_pow+0x998>
 8005140:	4652      	mov	r2, sl
 8005142:	f000 f9b9 	bl	80054b8 <scalbn>
 8005146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800514a:	f7ff bbf2 	b.w	8004932 <__ieee754_pow+0x132>
 800514e:	4b35      	ldr	r3, [pc, #212]	; (8005224 <__ieee754_pow+0xa24>)
 8005150:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005154:	429f      	cmp	r7, r3
 8005156:	f77f af13 	ble.w	8004f80 <__ieee754_pow+0x780>
 800515a:	4b33      	ldr	r3, [pc, #204]	; (8005228 <__ieee754_pow+0xa28>)
 800515c:	440b      	add	r3, r1
 800515e:	4303      	orrs	r3, r0
 8005160:	d00b      	beq.n	800517a <__ieee754_pow+0x97a>
 8005162:	a32b      	add	r3, pc, #172	; (adr r3, 8005210 <__ieee754_pow+0xa10>)
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800516c:	f7fb f9ac 	bl	80004c8 <__aeabi_dmul>
 8005170:	a327      	add	r3, pc, #156	; (adr r3, 8005210 <__ieee754_pow+0xa10>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7ff bbdc 	b.w	8004932 <__ieee754_pow+0x132>
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	f7fa ffeb 	bl	8000158 <__aeabi_dsub>
 8005182:	4642      	mov	r2, r8
 8005184:	464b      	mov	r3, r9
 8005186:	f7fb fc25 	bl	80009d4 <__aeabi_dcmpge>
 800518a:	2800      	cmp	r0, #0
 800518c:	f43f aef8 	beq.w	8004f80 <__ieee754_pow+0x780>
 8005190:	e7e7      	b.n	8005162 <__ieee754_pow+0x962>
 8005192:	f04f 0a00 	mov.w	sl, #0
 8005196:	e71e      	b.n	8004fd6 <__ieee754_pow+0x7d6>
 8005198:	4621      	mov	r1, r4
 800519a:	e7d4      	b.n	8005146 <__ieee754_pow+0x946>
 800519c:	f04f 0b00 	mov.w	fp, #0
 80051a0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005220 <__ieee754_pow+0xa20>
 80051a4:	f7ff bbb0 	b.w	8004908 <__ieee754_pow+0x108>
 80051a8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80051ac:	f7ff bbac 	b.w	8004908 <__ieee754_pow+0x108>
 80051b0:	4638      	mov	r0, r7
 80051b2:	4641      	mov	r1, r8
 80051b4:	f7ff bbbf 	b.w	8004936 <__ieee754_pow+0x136>
 80051b8:	9200      	str	r2, [sp, #0]
 80051ba:	f7ff bb7f 	b.w	80048bc <__ieee754_pow+0xbc>
 80051be:	2300      	movs	r3, #0
 80051c0:	f7ff bb69 	b.w	8004896 <__ieee754_pow+0x96>
 80051c4:	f3af 8000 	nop.w
 80051c8:	652b82fe 	.word	0x652b82fe
 80051cc:	3c971547 	.word	0x3c971547
 80051d0:	00000000 	.word	0x00000000
 80051d4:	3fe62e43 	.word	0x3fe62e43
 80051d8:	fefa39ef 	.word	0xfefa39ef
 80051dc:	3fe62e42 	.word	0x3fe62e42
 80051e0:	0ca86c39 	.word	0x0ca86c39
 80051e4:	be205c61 	.word	0xbe205c61
 80051e8:	72bea4d0 	.word	0x72bea4d0
 80051ec:	3e663769 	.word	0x3e663769
 80051f0:	c5d26bf1 	.word	0xc5d26bf1
 80051f4:	3ebbbd41 	.word	0x3ebbbd41
 80051f8:	af25de2c 	.word	0xaf25de2c
 80051fc:	3f11566a 	.word	0x3f11566a
 8005200:	16bebd93 	.word	0x16bebd93
 8005204:	3f66c16c 	.word	0x3f66c16c
 8005208:	5555553e 	.word	0x5555553e
 800520c:	3fc55555 	.word	0x3fc55555
 8005210:	c2f8f359 	.word	0xc2f8f359
 8005214:	01a56e1f 	.word	0x01a56e1f
 8005218:	3fe00000 	.word	0x3fe00000
 800521c:	000fffff 	.word	0x000fffff
 8005220:	3ff00000 	.word	0x3ff00000
 8005224:	4090cbff 	.word	0x4090cbff
 8005228:	3f6f3400 	.word	0x3f6f3400

0800522c <__ieee754_sqrt>:
 800522c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8005380 <__ieee754_sqrt+0x154>
 8005230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005234:	ea3c 0c01 	bics.w	ip, ip, r1
 8005238:	460b      	mov	r3, r1
 800523a:	4606      	mov	r6, r0
 800523c:	460d      	mov	r5, r1
 800523e:	460a      	mov	r2, r1
 8005240:	4607      	mov	r7, r0
 8005242:	4604      	mov	r4, r0
 8005244:	d10e      	bne.n	8005264 <__ieee754_sqrt+0x38>
 8005246:	4602      	mov	r2, r0
 8005248:	f7fb f93e 	bl	80004c8 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4630      	mov	r0, r6
 8005252:	4629      	mov	r1, r5
 8005254:	f7fa ff82 	bl	800015c <__adddf3>
 8005258:	4606      	mov	r6, r0
 800525a:	460d      	mov	r5, r1
 800525c:	4630      	mov	r0, r6
 800525e:	4629      	mov	r1, r5
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	2900      	cmp	r1, #0
 8005266:	dc0d      	bgt.n	8005284 <__ieee754_sqrt+0x58>
 8005268:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800526c:	ea5c 0707 	orrs.w	r7, ip, r7
 8005270:	d0f4      	beq.n	800525c <__ieee754_sqrt+0x30>
 8005272:	b139      	cbz	r1, 8005284 <__ieee754_sqrt+0x58>
 8005274:	4602      	mov	r2, r0
 8005276:	f7fa ff6f 	bl	8000158 <__aeabi_dsub>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	f7fb fa4d 	bl	800071c <__aeabi_ddiv>
 8005282:	e7e9      	b.n	8005258 <__ieee754_sqrt+0x2c>
 8005284:	1512      	asrs	r2, r2, #20
 8005286:	d074      	beq.n	8005372 <__ieee754_sqrt+0x146>
 8005288:	2000      	movs	r0, #0
 800528a:	07d5      	lsls	r5, r2, #31
 800528c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005290:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8005294:	bf5e      	ittt	pl
 8005296:	0fe3      	lsrpl	r3, r4, #31
 8005298:	0064      	lslpl	r4, r4, #1
 800529a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800529e:	0fe3      	lsrs	r3, r4, #31
 80052a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80052a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80052a8:	2516      	movs	r5, #22
 80052aa:	4601      	mov	r1, r0
 80052ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80052b0:	1076      	asrs	r6, r6, #1
 80052b2:	0064      	lsls	r4, r4, #1
 80052b4:	188f      	adds	r7, r1, r2
 80052b6:	429f      	cmp	r7, r3
 80052b8:	bfde      	ittt	le
 80052ba:	1bdb      	suble	r3, r3, r7
 80052bc:	18b9      	addle	r1, r7, r2
 80052be:	1880      	addle	r0, r0, r2
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	3d01      	subs	r5, #1
 80052c4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80052c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80052cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80052d0:	d1f0      	bne.n	80052b4 <__ieee754_sqrt+0x88>
 80052d2:	462a      	mov	r2, r5
 80052d4:	f04f 0e20 	mov.w	lr, #32
 80052d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80052dc:	428b      	cmp	r3, r1
 80052de:	eb07 0c05 	add.w	ip, r7, r5
 80052e2:	dc02      	bgt.n	80052ea <__ieee754_sqrt+0xbe>
 80052e4:	d113      	bne.n	800530e <__ieee754_sqrt+0xe2>
 80052e6:	45a4      	cmp	ip, r4
 80052e8:	d811      	bhi.n	800530e <__ieee754_sqrt+0xe2>
 80052ea:	f1bc 0f00 	cmp.w	ip, #0
 80052ee:	eb0c 0507 	add.w	r5, ip, r7
 80052f2:	da43      	bge.n	800537c <__ieee754_sqrt+0x150>
 80052f4:	2d00      	cmp	r5, #0
 80052f6:	db41      	blt.n	800537c <__ieee754_sqrt+0x150>
 80052f8:	f101 0801 	add.w	r8, r1, #1
 80052fc:	1a5b      	subs	r3, r3, r1
 80052fe:	4641      	mov	r1, r8
 8005300:	45a4      	cmp	ip, r4
 8005302:	bf88      	it	hi
 8005304:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8005308:	eba4 040c 	sub.w	r4, r4, ip
 800530c:	443a      	add	r2, r7
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	f1be 0e01 	subs.w	lr, lr, #1
 8005314:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005318:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800531c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005320:	d1dc      	bne.n	80052dc <__ieee754_sqrt+0xb0>
 8005322:	4323      	orrs	r3, r4
 8005324:	d006      	beq.n	8005334 <__ieee754_sqrt+0x108>
 8005326:	1c54      	adds	r4, r2, #1
 8005328:	bf0b      	itete	eq
 800532a:	4672      	moveq	r2, lr
 800532c:	3201      	addne	r2, #1
 800532e:	3001      	addeq	r0, #1
 8005330:	f022 0201 	bicne.w	r2, r2, #1
 8005334:	1043      	asrs	r3, r0, #1
 8005336:	07c1      	lsls	r1, r0, #31
 8005338:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800533c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005340:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005344:	bf48      	it	mi
 8005346:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800534a:	4610      	mov	r0, r2
 800534c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005350:	e782      	b.n	8005258 <__ieee754_sqrt+0x2c>
 8005352:	0ae3      	lsrs	r3, r4, #11
 8005354:	3915      	subs	r1, #21
 8005356:	0564      	lsls	r4, r4, #21
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0fa      	beq.n	8005352 <__ieee754_sqrt+0x126>
 800535c:	02de      	lsls	r6, r3, #11
 800535e:	d50a      	bpl.n	8005376 <__ieee754_sqrt+0x14a>
 8005360:	f1c2 0020 	rsb	r0, r2, #32
 8005364:	fa24 f000 	lsr.w	r0, r4, r0
 8005368:	1e55      	subs	r5, r2, #1
 800536a:	4094      	lsls	r4, r2
 800536c:	4303      	orrs	r3, r0
 800536e:	1b4a      	subs	r2, r1, r5
 8005370:	e78a      	b.n	8005288 <__ieee754_sqrt+0x5c>
 8005372:	4611      	mov	r1, r2
 8005374:	e7f0      	b.n	8005358 <__ieee754_sqrt+0x12c>
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	3201      	adds	r2, #1
 800537a:	e7ef      	b.n	800535c <__ieee754_sqrt+0x130>
 800537c:	4688      	mov	r8, r1
 800537e:	e7bd      	b.n	80052fc <__ieee754_sqrt+0xd0>
 8005380:	7ff00000 	.word	0x7ff00000

08005384 <fabs>:
 8005384:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005388:	4770      	bx	lr

0800538a <finite>:
 800538a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800538e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005392:	0fc0      	lsrs	r0, r0, #31
 8005394:	4770      	bx	lr
	...

08005398 <nan>:
 8005398:	2000      	movs	r0, #0
 800539a:	4901      	ldr	r1, [pc, #4]	; (80053a0 <nan+0x8>)
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	7ff80000 	.word	0x7ff80000

080053a4 <rint>:
 80053a4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80053a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053aa:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80053ae:	2f13      	cmp	r7, #19
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	460c      	mov	r4, r1
 80053b6:	4605      	mov	r5, r0
 80053b8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80053bc:	dc59      	bgt.n	8005472 <rint+0xce>
 80053be:	2f00      	cmp	r7, #0
 80053c0:	da2a      	bge.n	8005418 <rint+0x74>
 80053c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80053c6:	4301      	orrs	r1, r0
 80053c8:	d022      	beq.n	8005410 <rint+0x6c>
 80053ca:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80053ce:	4301      	orrs	r1, r0
 80053d0:	424d      	negs	r5, r1
 80053d2:	430d      	orrs	r5, r1
 80053d4:	4936      	ldr	r1, [pc, #216]	; (80054b0 <rint+0x10c>)
 80053d6:	0c5c      	lsrs	r4, r3, #17
 80053d8:	0b2d      	lsrs	r5, r5, #12
 80053da:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80053de:	0464      	lsls	r4, r4, #17
 80053e0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80053e4:	ea45 0304 	orr.w	r3, r5, r4
 80053e8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80053ec:	4620      	mov	r0, r4
 80053ee:	4629      	mov	r1, r5
 80053f0:	f7fa feb4 	bl	800015c <__adddf3>
 80053f4:	e9cd 0100 	strd	r0, r1, [sp]
 80053f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053fc:	462b      	mov	r3, r5
 80053fe:	4622      	mov	r2, r4
 8005400:	f7fa feaa 	bl	8000158 <__aeabi_dsub>
 8005404:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005408:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4610      	mov	r0, r2
 8005412:	4619      	mov	r1, r3
 8005414:	b003      	add	sp, #12
 8005416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005418:	4926      	ldr	r1, [pc, #152]	; (80054b4 <rint+0x110>)
 800541a:	4139      	asrs	r1, r7
 800541c:	ea03 0001 	and.w	r0, r3, r1
 8005420:	4310      	orrs	r0, r2
 8005422:	d0f5      	beq.n	8005410 <rint+0x6c>
 8005424:	084b      	lsrs	r3, r1, #1
 8005426:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800542a:	ea52 0501 	orrs.w	r5, r2, r1
 800542e:	d00c      	beq.n	800544a <rint+0xa6>
 8005430:	ea24 0303 	bic.w	r3, r4, r3
 8005434:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005438:	2f13      	cmp	r7, #19
 800543a:	bf0c      	ite	eq
 800543c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8005440:	2500      	movne	r5, #0
 8005442:	fa44 f707 	asr.w	r7, r4, r7
 8005446:	ea43 0407 	orr.w	r4, r3, r7
 800544a:	4919      	ldr	r1, [pc, #100]	; (80054b0 <rint+0x10c>)
 800544c:	4623      	mov	r3, r4
 800544e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8005452:	462a      	mov	r2, r5
 8005454:	e9d6 4500 	ldrd	r4, r5, [r6]
 8005458:	4620      	mov	r0, r4
 800545a:	4629      	mov	r1, r5
 800545c:	f7fa fe7e 	bl	800015c <__adddf3>
 8005460:	e9cd 0100 	strd	r0, r1, [sp]
 8005464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005468:	4622      	mov	r2, r4
 800546a:	462b      	mov	r3, r5
 800546c:	f7fa fe74 	bl	8000158 <__aeabi_dsub>
 8005470:	e7cc      	b.n	800540c <rint+0x68>
 8005472:	2f33      	cmp	r7, #51	; 0x33
 8005474:	dd05      	ble.n	8005482 <rint+0xde>
 8005476:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800547a:	d1c9      	bne.n	8005410 <rint+0x6c>
 800547c:	f7fa fe6e 	bl	800015c <__adddf3>
 8005480:	e7c4      	b.n	800540c <rint+0x68>
 8005482:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005486:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800548a:	fa21 f10c 	lsr.w	r1, r1, ip
 800548e:	4208      	tst	r0, r1
 8005490:	d0be      	beq.n	8005410 <rint+0x6c>
 8005492:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8005496:	bf18      	it	ne
 8005498:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800549c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80054a0:	bf1e      	ittt	ne
 80054a2:	ea20 0303 	bicne.w	r3, r0, r3
 80054a6:	fa45 fc0c 	asrne.w	ip, r5, ip
 80054aa:	ea43 050c 	orrne.w	r5, r3, ip
 80054ae:	e7cc      	b.n	800544a <rint+0xa6>
 80054b0:	08005640 	.word	0x08005640
 80054b4:	000fffff 	.word	0x000fffff

080054b8 <scalbn>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80054be:	4604      	mov	r4, r0
 80054c0:	460d      	mov	r5, r1
 80054c2:	4617      	mov	r7, r2
 80054c4:	460b      	mov	r3, r1
 80054c6:	b996      	cbnz	r6, 80054ee <scalbn+0x36>
 80054c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054cc:	4303      	orrs	r3, r0
 80054ce:	d039      	beq.n	8005544 <scalbn+0x8c>
 80054d0:	4b35      	ldr	r3, [pc, #212]	; (80055a8 <scalbn+0xf0>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	f7fa fff8 	bl	80004c8 <__aeabi_dmul>
 80054d8:	4b34      	ldr	r3, [pc, #208]	; (80055ac <scalbn+0xf4>)
 80054da:	4604      	mov	r4, r0
 80054dc:	429f      	cmp	r7, r3
 80054de:	460d      	mov	r5, r1
 80054e0:	da0f      	bge.n	8005502 <scalbn+0x4a>
 80054e2:	a32d      	add	r3, pc, #180	; (adr r3, 8005598 <scalbn+0xe0>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fa ffee 	bl	80004c8 <__aeabi_dmul>
 80054ec:	e006      	b.n	80054fc <scalbn+0x44>
 80054ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80054f2:	4296      	cmp	r6, r2
 80054f4:	d10a      	bne.n	800550c <scalbn+0x54>
 80054f6:	4602      	mov	r2, r0
 80054f8:	f7fa fe30 	bl	800015c <__adddf3>
 80054fc:	4604      	mov	r4, r0
 80054fe:	460d      	mov	r5, r1
 8005500:	e020      	b.n	8005544 <scalbn+0x8c>
 8005502:	460b      	mov	r3, r1
 8005504:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005508:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800550c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005510:	19b9      	adds	r1, r7, r6
 8005512:	4291      	cmp	r1, r2
 8005514:	dd0e      	ble.n	8005534 <scalbn+0x7c>
 8005516:	a322      	add	r3, pc, #136	; (adr r3, 80055a0 <scalbn+0xe8>)
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005520:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005524:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005528:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800552c:	4820      	ldr	r0, [pc, #128]	; (80055b0 <scalbn+0xf8>)
 800552e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005532:	e7d9      	b.n	80054e8 <scalbn+0x30>
 8005534:	2900      	cmp	r1, #0
 8005536:	dd08      	ble.n	800554a <scalbn+0x92>
 8005538:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800553c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005540:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005544:	4620      	mov	r0, r4
 8005546:	4629      	mov	r1, r5
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800554e:	da16      	bge.n	800557e <scalbn+0xc6>
 8005550:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005554:	429f      	cmp	r7, r3
 8005556:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800555a:	dd08      	ble.n	800556e <scalbn+0xb6>
 800555c:	4c15      	ldr	r4, [pc, #84]	; (80055b4 <scalbn+0xfc>)
 800555e:	4814      	ldr	r0, [pc, #80]	; (80055b0 <scalbn+0xf8>)
 8005560:	f363 74df 	bfi	r4, r3, #31, #1
 8005564:	a30e      	add	r3, pc, #56	; (adr r3, 80055a0 <scalbn+0xe8>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	4621      	mov	r1, r4
 800556c:	e7bc      	b.n	80054e8 <scalbn+0x30>
 800556e:	4c12      	ldr	r4, [pc, #72]	; (80055b8 <scalbn+0x100>)
 8005570:	4812      	ldr	r0, [pc, #72]	; (80055bc <scalbn+0x104>)
 8005572:	f363 74df 	bfi	r4, r3, #31, #1
 8005576:	a308      	add	r3, pc, #32	; (adr r3, 8005598 <scalbn+0xe0>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	e7f5      	b.n	800556a <scalbn+0xb2>
 800557e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005582:	3136      	adds	r1, #54	; 0x36
 8005584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005588:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800558c:	4620      	mov	r0, r4
 800558e:	4629      	mov	r1, r5
 8005590:	2200      	movs	r2, #0
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <scalbn+0x108>)
 8005594:	e7a8      	b.n	80054e8 <scalbn+0x30>
 8005596:	bf00      	nop
 8005598:	c2f8f359 	.word	0xc2f8f359
 800559c:	01a56e1f 	.word	0x01a56e1f
 80055a0:	8800759c 	.word	0x8800759c
 80055a4:	7e37e43c 	.word	0x7e37e43c
 80055a8:	43500000 	.word	0x43500000
 80055ac:	ffff3cb0 	.word	0xffff3cb0
 80055b0:	8800759c 	.word	0x8800759c
 80055b4:	7e37e43c 	.word	0x7e37e43c
 80055b8:	01a56e1f 	.word	0x01a56e1f
 80055bc:	c2f8f359 	.word	0xc2f8f359
 80055c0:	3c900000 	.word	0x3c900000

080055c4 <_init>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr

080055d0 <_fini>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr
